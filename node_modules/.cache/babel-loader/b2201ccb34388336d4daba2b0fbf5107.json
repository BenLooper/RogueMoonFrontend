{"ast":null,"code":"export const initialState = {\n  //login\n  usernameInput: '',\n  passwordInput: '',\n  user: {},\n  ownedCards: [],\n  token: '',\n  //gameboard\n  gameOn: false,\n  gameCards: [],\n  enemyField: {\n    space: [],\n    ground: [],\n    foot: []\n  },\n  userField: {\n    space: [],\n    ground: [],\n    foot: []\n  },\n  hand: [],\n  //scores \n  userScore: 0,\n  enemyScore: 0\n};\n\nconst rowScore = array => {\n  let score = 0;\n\n  for (let i = 0; i < array.length; i++) {\n    score += array[i].strength;\n  }\n\n  return score;\n};\n\nconst adjustTotalScore = () => {};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE_USERNAME_INPUT':\n      return { ...state,\n        usernameInput: action.value\n      };\n      break;\n\n    case 'CHANGE_PASSWORD_INPUT':\n      return { ...state,\n        passwordInput: action.value\n      };\n      break;\n\n    case 'SET_USER':\n      return { ...state,\n        user: action.user,\n        token: action.token,\n        ownedCards: action.ownedCards\n      };\n      break;\n\n    case 'SET_GAME_CARDS':\n      //TODO -> Gets sent a list of chosen cards to set as gameCards\n      return { ...state,\n        gameCards: state.ownedCards,\n        gameOn: true\n      };\n      break;\n\n    case 'SET_HAND':\n      //TODO -> Hand is randomly drawn from gameCards\n      let hand = state.gameCards.slice(5, 10);\n      return { ...state,\n        hand: hand\n      };\n      break;\n\n    case 'PLAY_CARD':\n      //Possible change --> send over something to indicate whether it's the enemy or user \n      let role = action.role;\n      let updatedHand = state.hand.filter(card => card.id !== action.card.id);\n      let updatedField = [...state.userField[role], action.card]; // return { ...state, userField.role: updatedRow, hand: updatedHand }\n\n      break;\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/ben/flatiron/work/mod5/moon-gwent/frontend/src/store/reducers/index.js"],"names":["initialState","usernameInput","passwordInput","user","ownedCards","token","gameOn","gameCards","enemyField","space","ground","foot","userField","hand","userScore","enemyScore","rowScore","array","score","i","length","strength","adjustTotalScore","reducer","state","action","type","value","slice","role","updatedHand","filter","card","id","updatedField"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAG;AACxB;AACAC,EAAAA,aAAa,EAAE,EAFS;AAGxBC,EAAAA,aAAa,EAAE,EAHS;AAIxBC,EAAAA,IAAI,EAAE,EAJkB;AAKxBC,EAAAA,UAAU,EAAE,EALY;AAMxBC,EAAAA,KAAK,EAAE,EANiB;AAQxB;AACAC,EAAAA,MAAM,EAAE,KATgB;AAUxBC,EAAAA,SAAS,EAAE,EAVa;AAWxBC,EAAAA,UAAU,EAAE;AACRC,IAAAA,KAAK,EAAE,EADC;AAERC,IAAAA,MAAM,EAAE,EAFA;AAGRC,IAAAA,IAAI,EAAE;AAHE,GAXY;AAgBxBC,EAAAA,SAAS,EAAE;AACPH,IAAAA,KAAK,EAAE,EADA;AAEPC,IAAAA,MAAM,EAAE,EAFD;AAGPC,IAAAA,IAAI,EAAE;AAHC,GAhBa;AAqBxBE,EAAAA,IAAI,EAAE,EArBkB;AAuBxB;AACAC,EAAAA,SAAS,EAAE,CAxBa;AAyBxBC,EAAAA,UAAU,EAAE;AAzBY,CAArB;;AA4BP,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AACxB,MAAIC,KAAK,GAAG,CAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnCD,IAAAA,KAAK,IAAID,KAAK,CAACE,CAAD,CAAL,CAASE,QAAlB;AACH;;AACD,SAAOH,KAAP;AACH,CAND;;AAQA,MAAMI,gBAAgB,GAAG,MAAM,CAE9B,CAFD;;AAIA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAK,uBAAL;AACI,aAAO,EAAE,GAAGF,KAAL;AAAYvB,QAAAA,aAAa,EAAEwB,MAAM,CAACE;AAAlC,OAAP;AACA;;AAEJ,SAAK,uBAAL;AACI,aAAO,EAAE,GAAGH,KAAL;AAAYtB,QAAAA,aAAa,EAAEuB,MAAM,CAACE;AAAlC,OAAP;AACA;;AAEJ,SAAK,UAAL;AACI,aAAO,EAAE,GAAGH,KAAL;AAAYrB,QAAAA,IAAI,EAAEsB,MAAM,CAACtB,IAAzB;AAA+BE,QAAAA,KAAK,EAAEoB,MAAM,CAACpB,KAA7C;AAAoDD,QAAAA,UAAU,EAAEqB,MAAM,CAACrB;AAAvE,OAAP;AACA;;AAEJ,SAAK,gBAAL;AACI;AACA,aAAO,EAAE,GAAGoB,KAAL;AAAYjB,QAAAA,SAAS,EAAEiB,KAAK,CAACpB,UAA7B;AAAyCE,QAAAA,MAAM,EAAE;AAAjD,OAAP;AACA;;AAEJ,SAAK,UAAL;AACI;AACA,UAAIO,IAAI,GAAGW,KAAK,CAACjB,SAAN,CAAgBqB,KAAhB,CAAsB,CAAtB,EAAyB,EAAzB,CAAX;AACA,aAAO,EAAE,GAAGJ,KAAL;AAAYX,QAAAA,IAAI,EAAEA;AAAlB,OAAP;AACA;;AAEJ,SAAK,WAAL;AACI;AACA,UAAIgB,IAAI,GAAGJ,MAAM,CAACI,IAAlB;AACA,UAAIC,WAAW,GAAGN,KAAK,CAACX,IAAN,CAAWkB,MAAX,CAAkBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYR,MAAM,CAACO,IAAP,CAAYC,EAAlD,CAAlB;AACA,UAAIC,YAAY,GAAG,CAAC,GAAGV,KAAK,CAACZ,SAAN,CAAgBiB,IAAhB,CAAJ,EAA2BJ,MAAM,CAACO,IAAlC,CAAnB,CAJJ,CAKI;;AACA;;AAEJ;AACI,aAAOR,KAAP;AAlCR;AAoCH,CArCM","sourcesContent":["export const initialState = {\n    //login\n    usernameInput: '',\n    passwordInput: '',\n    user: {},\n    ownedCards: [],\n    token: '',\n\n    //gameboard\n    gameOn: false,\n    gameCards: [],\n    enemyField: {\n        space: [],\n        ground: [],\n        foot: []\n    },\n    userField: {\n        space: [],\n        ground: [],\n        foot: []\n    },\n    hand: [],\n\n    //scores \n    userScore: 0,\n    enemyScore: 0,\n}\n\nconst rowScore = (array) => {\n    let score = 0\n    for (let i = 0; i < array.length; i++) {\n        score += array[i].strength\n    }\n    return score\n}\n\nconst adjustTotalScore = () => {\n\n}\n\nexport const reducer = (state, action) => {\n    switch (action.type) {\n\n        case 'CHANGE_USERNAME_INPUT':\n            return { ...state, usernameInput: action.value }\n            break;\n\n        case 'CHANGE_PASSWORD_INPUT':\n            return { ...state, passwordInput: action.value }\n            break;\n\n        case 'SET_USER':\n            return { ...state, user: action.user, token: action.token, ownedCards: action.ownedCards }\n            break;\n\n        case 'SET_GAME_CARDS':\n            //TODO -> Gets sent a list of chosen cards to set as gameCards\n            return { ...state, gameCards: state.ownedCards, gameOn: true }\n            break;\n\n        case 'SET_HAND':\n            //TODO -> Hand is randomly drawn from gameCards\n            let hand = state.gameCards.slice(5, 10);\n            return { ...state, hand: hand }\n            break;\n\n        case 'PLAY_CARD':\n            //Possible change --> send over something to indicate whether it's the enemy or user \n            let role = action.role \n            let updatedHand = state.hand.filter(card => card.id !== action.card.id)\n            let updatedField = [...state.userField[role], action.card]\n            // return { ...state, userField.role: updatedRow, hand: updatedHand }\n            break;\n\n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}