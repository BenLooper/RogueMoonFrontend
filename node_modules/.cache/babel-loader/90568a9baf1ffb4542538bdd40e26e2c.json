{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\17132\\\\Documents\\\\RogueMoonFrontend\\\\src\\\\components\\\\UnitCard.js\",\n    _s = $RefreshSig$();\n\nimport { Card } from 'react-bootstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport gun from '../resources/laser-gun.png';\nimport wheel from '../resources/car.png';\nimport ship from '../resources/battleship.png';\nimport develop from '../resources/sketch.png';\nimport rocky from '../resources/mountain.png';\nimport cold from '../resources/snowflakes.png';\nimport flare from '../resources/electricity.png';\n\nconst UnitCard = ({\n  card,\n  hand,\n  userField,\n  enemyField\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const env = useSelector(state => state.env);\n  const userTurn = useSelector(state => state.userTurn);\n  const oldStrength = useState(card.strength);\n  const [color, setColor] = useState('green');\n  let logo;\n\n  if (card.role == 'foot' || card.role == 'other') {\n    logo = gun;\n  } else if (card.role == 'ground') {\n    logo = wheel;\n  } else if (card.role == 'space') {\n    logo = ship;\n  } else if (card.ability == 'develop') {\n    logo = develop;\n  } else if (card.ability == 'rocky') {\n    logo = rocky;\n  } else if (card.ability == 'cold') {\n    logo = cold;\n  } else if (card.ability == 'flare') {\n    logo = flare;\n  }\n\n  const playCard = () => {\n    let role = card.role;\n\n    if (role == 'env') {\n      //if it's an env card, put it in the shared env row\n      dispatch({\n        type: \"PLAY_ENV\",\n        card: card\n      });\n      dispatch({\n        type: \"END_TURN\"\n      });\n    } else {\n      //puts the card in the correct array inside field \n      dispatch({\n        type: \"PLAY_CARD\",\n        role: role,\n        card: card\n      });\n      dispatch({\n        type: 'END_TURN'\n      });\n    }\n  };\n\n  useEffect(() => {\n    //Cards look at env. When it changes, they run the corresponding action \n    //if they're in the field and not an env card, their strength is reduced accordingly\n    if ((userField === true || userField === false) && !card.is_special) {\n      let currentConditions = env.map(card => card.ability);\n\n      if (currentConditions.includes('develop')) {\n        dispatch({\n          type: 'DEVELOP',\n          card: card,\n          oldStrength: oldStrength[0],\n          userField: userField ? true : false\n        });\n        setColor('green');\n      } else if (card.role === 'foot' && currentConditions.includes('cold')) {\n        console.log('hey');\n        dispatch({\n          type: \"COLD\",\n          card: card\n        });\n        setColor('red');\n      } else if (card.role === 'ground' && currentConditions.includes('rocky')) {\n        dispatch({\n          type: 'ROCKY',\n          card: card\n        });\n        setColor('red');\n      } else if (card.role === 'space' && currentConditions.includes('flare')) {\n        dispatch({\n          type: 'FLARE',\n          card: card\n        });\n        setColor('red');\n      }\n    }\n\n    if (hand && !(card.role === 'env')) {\n      let currentConditions = env.map(card => card.ability);\n\n      if (currentConditions.includes('develop')) {\n        dispatch({\n          type: 'DEVELOP',\n          card: card,\n          oldStrength: oldStrength[0],\n          userField: userField ? true : false\n        });\n      }\n    }\n  }, [env]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"card-unit\",\n    border: \"secondary\",\n    bg: 'dark',\n    onClick: hand && userTurn ? () => playCard() : null,\n    children: [card.role == 'env' ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"strength\",\n      style: {\n        color: color,\n        borderColor: color\n      },\n      children: hand ? oldStrength : card.strength\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-content\",\n      children: /*#__PURE__*/_jsxDEV(Card.Img, {\n        src: logo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UnitCard, \"HteZIkoL5n117kxzlBfkPD+dtYw=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = UnitCard;\nexport default UnitCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"UnitCard\");","map":{"version":3,"sources":["C:/Users/17132/Documents/RogueMoonFrontend/src/components/UnitCard.js"],"names":["Card","useSelector","useDispatch","useEffect","useState","gun","wheel","ship","develop","rocky","cold","flare","UnitCard","card","hand","userField","enemyField","dispatch","env","state","userTurn","oldStrength","strength","color","setColor","logo","role","ability","playCard","type","is_special","currentConditions","map","includes","console","log","borderColor"],"mappings":"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","sourcesContent":["import { Card } from 'react-bootstrap'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { useEffect, useState } from 'react'\r\nimport gun from '../resources/laser-gun.png'\r\nimport wheel from '../resources/car.png'\r\nimport ship from '../resources/battleship.png'\r\nimport develop from '../resources/sketch.png'\r\nimport rocky from '../resources/mountain.png'\r\nimport cold from '../resources/snowflakes.png'\r\nimport flare from '../resources/electricity.png'\r\n\r\nconst UnitCard = ({ card, hand, userField, enemyField }) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const env = useSelector((state) => state.env)\r\n    const userTurn = useSelector((state) => state.userTurn)\r\n    const oldStrength = useState(card.strength)\r\n    const [color,setColor] = useState('green')\r\n\r\n    let logo\r\n    if (card.role == 'foot' || card.role == 'other') {\r\n        logo = gun\r\n    }\r\n    else if (card.role == 'ground') {\r\n        logo = wheel\r\n    }\r\n    else if (card.role == 'space') {\r\n        logo = ship\r\n    }\r\n    else if (card.ability == 'develop') {\r\n        logo = develop\r\n    }\r\n    else if (card.ability == 'rocky') {\r\n        logo = rocky\r\n    }\r\n    else if (card.ability == 'cold') {\r\n        logo = cold\r\n    }\r\n    else if (card.ability == 'flare') {\r\n        logo = flare\r\n    }\r\n\r\n    const playCard = () => {\r\n        let role = card.role\r\n        if (role == 'env') {\r\n            //if it's an env card, put it in the shared env row\r\n            dispatch({ type: \"PLAY_ENV\", card: card })\r\n            dispatch({ type: \"END_TURN\" })\r\n        }\r\n        else {\r\n            //puts the card in the correct array inside field \r\n            dispatch({ type: \"PLAY_CARD\", role: role, card: card })\r\n            dispatch({ type: 'END_TURN' })\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        //Cards look at env. When it changes, they run the corresponding action \r\n        //if they're in the field and not an env card, their strength is reduced accordingly\r\n        if ((userField === true || userField === false) && !(card.is_special)) {\r\n            let currentConditions = env.map(card => card.ability)\r\n            if (currentConditions.includes('develop')) {\r\n                dispatch({ type: 'DEVELOP', card: card, oldStrength: oldStrength[0], userField: userField ? true : false })\r\n                setColor('green')\r\n            }\r\n            else if ((card.role === 'foot') && (currentConditions.includes('cold'))) {\r\n                console.log('hey')\r\n                dispatch({ type: \"COLD\", card: card })\r\n                setColor('red')\r\n            }\r\n            else if ((card.role === 'ground') && (currentConditions.includes('rocky'))) {\r\n                dispatch({ type: 'ROCKY', card: card })\r\n                setColor('red')\r\n            }\r\n            else if ((card.role === 'space') && (currentConditions.includes('flare'))) {\r\n                dispatch({ type: 'FLARE', card: card })\r\n                setColor('red')\r\n            }\r\n        }\r\n        if (hand && !(card.role === 'env')) {\r\n            let currentConditions = env.map(card => card.ability)\r\n            if (currentConditions.includes('develop')) {\r\n                dispatch({ type: 'DEVELOP', card: card, oldStrength: oldStrength[0], userField: userField ? true : false })\r\n            }\r\n        }\r\n    }, [env])\r\n\r\n\r\n    return (\r\n        <Card\r\n            className='card-unit'\r\n            border='secondary'\r\n            bg={'dark'}\r\n            onClick={hand && userTurn ? () => playCard() : null}\r\n        >\r\n            {card.role == 'env' ?\r\n                null :\r\n                <div className=\"strength\"\r\n                    style={{ color: color, borderColor:color}}>\r\n                    {hand ? oldStrength : card.strength}\r\n                </div>\r\n            }\r\n            <div className='card-content'>\r\n                <Card.Img src={logo} />\r\n            </div>\r\n\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default UnitCard;"]},"metadata":{},"sourceType":"module"}