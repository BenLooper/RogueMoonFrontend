{"ast":null,"code":"export const initialState = {\n  //login\n  usernameInput: '',\n  passwordInput: '',\n  user: {},\n  ownedCards: [],\n  token: '',\n  //gameboard\n  gameOn: false,\n  gameCards: [],\n  enemySpace: [],\n  enemyGround: [],\n  enemyFoot: [],\n  userFoot: [],\n  userGround: [],\n  userSpace: [],\n  hand: [],\n  //scores \n  userScore: 0,\n  enemyScore: 0,\n  enemySpaceScore: 0,\n  enemyGroundScore: 0,\n  enemyFootScore: 0,\n  userFootScore: 0,\n  userGroundScore: 0,\n  userSpaceScore: 0\n};\n\nconst rowScore = array => {\n  let score = 0;\n\n  for (let i = 0; i < array.length; i++) {\n    score += array[i].strength;\n  }\n\n  return score;\n};\n\nconst adjustTotalScore = () => {};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE_USERNAME_INPUT':\n      return { ...state,\n        usernameInput: action.value\n      };\n      break;\n\n    case 'CHANGE_PASSWORD_INPUT':\n      return { ...state,\n        passwordInput: action.value\n      };\n      break;\n\n    case 'SET_USER':\n      return { ...state,\n        user: action.user,\n        token: action.token,\n        ownedCards: action.ownedCards\n      };\n      break;\n\n    case 'SET_GAME_CARDS':\n      //TODO -> Gets sent a list of chosen cards to set as gameCards\n      return { ...state,\n        gameCards: state.ownedCards,\n        gameOn: true\n      };\n      break;\n\n    case 'SET_HAND':\n      //TODO -> Hand is randomly drawn from gameCards\n      let hand = state.gameCards.slice(5, 10);\n      return { ...state,\n        hand: hand\n      };\n      break;\n\n    case 'PLAY_CARD':\n      //Possible change --> send over something to indicate whether it's the enemy or user \n      let role = `user${action.role}`;\n      let updatedHand = state.hand.filter(card => card.id !== action.card.id);\n      let updatedRow = [...state[role], action.card];\n      return { ...state,\n        [role]: updatedRow,\n        hand: updatedHand\n      };\n      break;\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/ben/flatiron/work/mod5/moon-gwent/frontend/src/store/reducers/index.js"],"names":["initialState","usernameInput","passwordInput","user","ownedCards","token","gameOn","gameCards","enemySpace","enemyGround","enemyFoot","userFoot","userGround","userSpace","hand","userScore","enemyScore","enemySpaceScore","enemyGroundScore","enemyFootScore","userFootScore","userGroundScore","userSpaceScore","rowScore","array","score","i","length","strength","adjustTotalScore","reducer","state","action","type","value","slice","role","updatedHand","filter","card","id","updatedRow"],"mappings":"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","sourcesContent":["export const initialState = {\n    //login\n    usernameInput: '',\n    passwordInput: '',\n    user: {},\n    ownedCards: [],\n    token: '',\n\n    //gameboard\n    gameOn:false,\n    gameCards: [],\n    enemySpace: [],\n    enemyGround: [],\n    enemyFoot: [],\n    userFoot: [],\n    userGround: [],\n    userSpace: [],\n    hand: [],\n\n    //scores \n    userScore: 0,\n    enemyScore: 0,\n    enemySpaceScore: 0,\n    enemyGroundScore: 0,\n    enemyFootScore: 0,\n    userFootScore: 0,\n    userGroundScore: 0,\n    userSpaceScore: 0,\n}\n\nconst rowScore = (array) => {\n    let score = 0\n    for (let i = 0; i < array.length; i++) {\n        score += array[i].strength\n    }\n    return score\n}\nconst adjustTotalScore = () => {\n\n}\n\nexport const reducer = (state, action) => {\n    switch (action.type) {\n\n        case 'CHANGE_USERNAME_INPUT':\n            return { ...state, usernameInput: action.value }\n            break;\n\n        case 'CHANGE_PASSWORD_INPUT':\n            return { ...state, passwordInput: action.value }\n            break;\n\n        case 'SET_USER':\n            return { ...state, user: action.user, token: action.token, ownedCards: action.ownedCards }\n            break;\n\n        case 'SET_GAME_CARDS':\n            //TODO -> Gets sent a list of chosen cards to set as gameCards\n            return {...state,gameCards:state.ownedCards,gameOn:true}\n            break;\n\n        case 'SET_HAND':\n            //TODO -> Hand is randomly drawn from gameCards\n            let hand = state.gameCards.slice(5,10);\n            return {...state, hand:hand}\n            break;\n\n        case 'PLAY_CARD':\n            //Possible change --> send over something to indicate whether it's the enemy or user \n            let role = `user${action.role}`\n            let updatedHand = state.hand.filter(card => card.id !== action.card.id)\n            let updatedRow = [...state[role], action.card]\n            return { ...state, [role]: updatedRow, hand: updatedHand }\n            break;\n        \n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}