{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ben/flatiron/work/mod5/moon-gwent/frontend/src/containers/GameBoard.js\",\n    _s = $RefreshSig$();\n\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport history from '../history';\nimport Battlefield from './Battlefield';\nimport PlayerInfo from './PlayerInfo';\nimport DeckInfo from './DeckInfo';\nimport VictoryModal from '../components/VictoryModal';\n\nfunction GameBoard() {\n  _s();\n\n  const userReactors = useSelector(state => state.userReactors);\n  const enemyReactors = useSelector(state => state.enemyReactors);\n\n  const createGame = () => {\n    fetch('http://localhost:3000/games', {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Authorization\": `Bearer ${window.localStorage.token}`\n      },\n      body: JSON.stringify({\n        game_won: userReactors > enemyReactors ? true : false\n      })\n    }).then(res => res.json()).then(userInfo => {\n      dispatch({\n        type: 'GAME_OVER',\n        userVictory: userInfo.newGame.game_won,\n        games: userInfo.games\n      });\n    });\n  }; //if one side's reactors are down, end the game \n\n\n  useEffect(() => {\n    if (userReactors === 0 || enemyReactors === 0) {\n      createGame();\n    }\n  }, [userReactors, enemyReactors]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    className: \"gameboard\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        xs: 3,\n        children: /*#__PURE__*/_jsxDEV(PlayerInfo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 7,\n        className: \"battlefield\",\n        children: /*#__PURE__*/_jsxDEV(Battlefield, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: 2,\n        children: /*#__PURE__*/_jsxDEV(DeckInfo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GameBoard, \"JTc6RG8NJZb1yNPSsOA8jP4YNFo=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = GameBoard;\nexport default GameBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"sources":["/Users/ben/flatiron/work/mod5/moon-gwent/frontend/src/containers/GameBoard.js"],"names":["Container","Row","Col","useDispatch","useSelector","useState","history","Battlefield","PlayerInfo","DeckInfo","VictoryModal","GameBoard","userReactors","state","enemyReactors","createGame","fetch","method","headers","window","localStorage","token","body","JSON","stringify","game_won","then","res","json","userInfo","dispatch","type","userVictory","newGame","games","useEffect"],"mappings":";;;;;AAAA,SAASA,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,QAAoC,iBAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,OAAP,MAAoB,YAApB;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;;AAEA,SAASC,SAAT,GAAqB;AAAA;;AAEjB,QAAMC,YAAY,GAAGR,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACD,YAAlB,CAAhC;AACA,QAAME,aAAa,GAAGV,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACC,aAAlB,CAAjC;;AACA,QAAMC,UAAU,GAAG,MAAM;AACrBC,IAAAA,KAAK,CAAC,6BAAD,EAAgC;AACjCC,MAAAA,MAAM,EAAE,MADyB;AAEjCC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,kBAAU,kBAFL;AAGL,yBAAkB,UAASC,MAAM,CAACC,YAAP,CAAoBC,KAAM;AAHhD,OAFwB;AAOjCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,QAAAA,QAAQ,EAAGb,YAAY,GAAGE,aAAf,GAA+B,IAA/B,GAAsC;AADhC,OAAf;AAP2B,KAAhC,CAAL,CAWKY,IAXL,CAWUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAXjB,EAYKF,IAZL,CAYWG,QAAD,IAAc;AAChBC,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAE,WADD;AAELC,QAAAA,WAAW,EAAEH,QAAQ,CAACI,OAAT,CAAiBR,QAFzB;AAGLS,QAAAA,KAAK,EAAEL,QAAQ,CAACK;AAHX,OAAD,CAAR;AAKH,KAlBL;AAmBH,GApBD,CAJiB,CA0BjB;;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIvB,YAAY,KAAK,CAAjB,IAAsBE,aAAa,KAAK,CAA5C,EAA+C;AAC3CC,MAAAA,UAAU;AACb;AACJ,GAJQ,EAIN,CAACH,YAAD,EAAeE,aAAf,CAJM,CAAT;AAOA,sBACI,QAAC,SAAD;AAAW,IAAA,KAAK,MAAhB;AAAiB,IAAA,SAAS,EAAC,WAA3B;AAAA,2BACI,QAAC,GAAD;AAAA,8BACI,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA,+BACI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAII,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAY,QAAA,SAAS,EAAC,aAAtB;AAAA,+BACI,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAJJ,eAOI,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA,+BACI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH;;GAjDQH,S;UAEgBP,W,EACCA,W;;;KAHjBO,S;AAmDT,eAAeA,SAAf","sourcesContent":["import { Container, Row, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useState } from 'react'\nimport history from '../history'\n\nimport Battlefield from './Battlefield'\nimport PlayerInfo from './PlayerInfo'\nimport DeckInfo from './DeckInfo'\nimport VictoryModal from '../components/VictoryModal'\n\nfunction GameBoard() {\n\n    const userReactors = useSelector((state) => state.userReactors)\n    const enemyReactors = useSelector((state) => state.enemyReactors)\n    const createGame = () => {\n        fetch('http://localhost:3000/games', {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\",\n                \"Authorization\": `Bearer ${window.localStorage.token}`\n            },\n            body: JSON.stringify({\n                game_won: (userReactors > enemyReactors ? true : false)\n            })\n        })\n            .then(res => res.json())\n            .then((userInfo) => {\n                dispatch({\n                    type: 'GAME_OVER',\n                    userVictory: userInfo.newGame.game_won,\n                    games: userInfo.games\n                })\n            })\n    }\n\n    //if one side's reactors are down, end the game \n    useEffect(() => {\n        if (userReactors === 0 || enemyReactors === 0) {\n            createGame()\n        }\n    }, [userReactors, enemyReactors])\n\n    \n    return (\n        <Container fluid className=\"gameboard\">\n            <Row>\n                <Col xs={3}>\n                    <PlayerInfo />\n                </Col>\n                <Col xs={7} className=\"battlefield\">\n                    <Battlefield />\n                </Col>\n                <Col xs={2}>\n                    <DeckInfo />\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default GameBoard;"]},"metadata":{},"sourceType":"module"}