{"ast":null,"code":"export const initialState = {\n  //login\n  usernameInput: '',\n  passwordInput: '',\n  user: {},\n  ownedCards: [],\n  games: [],\n  //gameboard\n  gameOn: false,\n  drawHands: false,\n  gameCards: [],\n  enemyGameCards: [],\n  hand: [],\n  enemyHand: [],\n  userDiscard: [],\n  enemyDiscard: [],\n  enemyField: {\n    space: [],\n    ground: [],\n    foot: [],\n    env: [],\n    other: []\n  },\n  userField: {\n    space: [],\n    ground: [],\n    foot: [],\n    env: [],\n    other: []\n  },\n  //scores \n  userScore: 0,\n  enemyScore: 0,\n  //passing\n  userTurn: true,\n  userPass: false,\n  enemyPass: false,\n  //reactors \n  userReactors: 2,\n  enemyReactors: 2,\n  userVictory: null\n};\n\nconst rowScore = array => {\n  console.log(array);\n  let score = 0;\n\n  for (let i = 0; i < array.length; i++) {\n    score += array[i].strength;\n  }\n\n  return score;\n};\n\nconst newTotalScore = field => {\n  //we iterate through the field values (rows), and get the total of each rowScore\n  let total = Object.values(field).reduce((total, row) => total + rowScore(row), 0);\n  return total;\n};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE_USERNAME_INPUT':\n      return { ...state,\n        usernameInput: action.value\n      };\n      break;\n\n    case 'CHANGE_PASSWORD_INPUT':\n      return { ...state,\n        passwordInput: action.value\n      };\n      break;\n\n    case 'SET_USER':\n      return { ...state,\n        user: action.user,\n        ownedCards: action.ownedCards,\n        games: action.games,\n        gameOn: false\n      };\n      break;\n\n    case 'SET_GAME_CARDS':\n      //TODO -> Gets sent a list of chosen cards to set as gameCards from the selection screen            \n      return { ...state,\n        gameCards: action.gameCards,\n        enemyGameCards: action.enemyGameCards,\n        drawHands: true\n      };\n      break;\n\n    case 'SET_HANDS':\n      //Separate from game cards because hand is drawn in the battlefield, not the selection screen\n      let newHand = state.gameCards.slice(0, 10);\n      let newEnemyHand = state.enemyGameCards.slice(0, 10);\n      let newGameCards = state.gameCards.filter(card => !newHand.includes(card));\n      let newEnemyGameCards = state.enemyGameCards.filter(card => !newEnemyHand.includes(card));\n      return { ...state,\n        gameCards: newGameCards,\n        enemyGameCards: newEnemyGameCards,\n        hand: newHand,\n        enemyHand: newEnemyHand,\n        gameOn: true,\n        drawHands: false\n      };\n      break;\n\n    case 'PLAY_CARD':\n      //Possible change --> send over something to indicate whether it's the enemy or user \n      let role = action.role; //Remove the card from hand\n\n      let updatedUserHand = state.hand.filter(card => card.id !== action.card.id); //Update the row, then update the field with that updated row \n\n      let updatedUserRow = [...state.userField[role], action.card];\n      let updatedUserField = { ...state.userField,\n        [role]: updatedUserRow\n      }; //Find the new total, including the added card\n\n      let newUserTotal = newTotalScore(updatedUserField);\n      return { ...state,\n        userField: updatedUserField,\n        hand: updatedUserHand,\n        userScore: newUserTotal\n      };\n      break;\n\n    case 'ENEMY_PLAY':\n      let chosenCard = state.enemyHand.slice(0, 1)[0];\n      console.log(chosenCard);\n      let updatedEnemyHand = state.enemyHand.filter(card => card.id !== chosenCard.id);\n      let updatedEnemyRow = [...state.enemyField[chosenCard.role], chosenCard];\n      let updatedEnemyField = { ...state.enemyField,\n        [chosenCard.role]: updatedEnemyRow\n      };\n      let newEnemyTotal = newTotalScore(updatedEnemyField);\n      return { ...state,\n        enemyField: updatedEnemyField,\n        enemyHand: updatedEnemyHand,\n        enemyScore: newEnemyTotal\n      };\n      break;\n\n    case 'ENEMY_PASS':\n      return { ...state,\n        enemyPass: true,\n        userTurn: true\n      };\n      break;\n\n    case 'USER_PASS':\n      return { ...state,\n        userPass: true,\n        userTurn: false\n      };\n      break;\n\n    case 'ROUND_OVER':\n      if (state.userScore >= state.enemyScore) {\n        return { ...state,\n          enemyReactors: state.enemyReactors - 1\n        };\n      } else if (state.userScore < state.enemyScore) {\n        return { ...state,\n          userReactors: state.userReactors - 1\n        };\n      }\n\n      break;\n\n    case 'RESET_BOARD':\n      //This is super ugly but it works. We're setting the discard to everything in userField\n      //And then we're hardcoding in a clean new userField\n      let newUserDiscard = Object.values(state.userField).splice(0).flat();\n      let newEnemyDiscard = Object.values(state.enemyField).splice(0).flat();\n      let cleanUserField = {\n        userField: {\n          space: [],\n          ground: [],\n          foot: [],\n          env: [],\n          other: []\n        }\n      };\n      let cleanEnemyField = {\n        enemyField: {\n          space: [],\n          ground: [],\n          foot: [],\n          env: [],\n          other: []\n        }\n      };\n      return { ...state,\n        userField: cleanUserField.userField,\n        enemyField: cleanEnemyField.enemyField,\n        userPass: false,\n        enemyPass: false,\n        userDiscard: [...state.userDiscard, ...newUserDiscard],\n        enemyDiscard: [...state.enemyDiscard, ...newEnemyDiscard],\n        userScore: 0,\n        enemyScore: 0\n      };\n      break;\n\n    case 'GAME_OVER':\n      return { ...state,\n        userVictory: action.userVictory,\n        games: action.games,\n        userReactors: 2,\n        enemyReactors: 2,\n        gameOn: false,\n        userDiscard: [],\n        enemyDiscard: []\n      };\n      break;\n    // ABILITIES \n\n    case 'DEVELOP':\n      console.log('develop');\n      return { ...state\n      };\n      break;\n\n    case 'COLD':\n      //problem - the row scores are calculated in place\n      //so how do I set one row to 1 without changing the others? \n      //It needs to be a change to rowScore (so that it works in the score boxes too)\n      console.log('cold');\n      return { ...state\n      };\n      break;\n\n    case 'ROCKY':\n      console.log('rocky');\n      return { ...state\n      };\n      break;\n\n    case 'FLARE':\n      console.log('flare');\n      return { ...state\n      };\n      break;\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/ben/flatiron/work/mod5/moon-gwent/frontend/src/store/reducers/index.js"],"names":["initialState","usernameInput","passwordInput","user","ownedCards","games","gameOn","drawHands","gameCards","enemyGameCards","hand","enemyHand","userDiscard","enemyDiscard","enemyField","space","ground","foot","env","other","userField","userScore","enemyScore","userTurn","userPass","enemyPass","userReactors","enemyReactors","userVictory","rowScore","array","console","log","score","i","length","strength","newTotalScore","field","total","Object","values","reduce","row","reducer","state","action","type","value","newHand","slice","newEnemyHand","newGameCards","filter","card","includes","newEnemyGameCards","role","updatedUserHand","id","updatedUserRow","updatedUserField","newUserTotal","chosenCard","updatedEnemyHand","updatedEnemyRow","updatedEnemyField","newEnemyTotal","newUserDiscard","splice","flat","newEnemyDiscard","cleanUserField","cleanEnemyField"],"mappings":"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","sourcesContent":["export const initialState = {\n    //login\n    usernameInput: '',\n    passwordInput: '',\n    user: {},\n    ownedCards: [],\n    games: [],\n\n    //gameboard\n    gameOn: false,\n    drawHands: false,\n    gameCards: [],\n    enemyGameCards: [],\n    hand: [],\n    enemyHand: [],\n    userDiscard: [],\n    enemyDiscard: [],\n    enemyField: {\n        space: [],\n        ground: [],\n        foot: [],\n        env: [],\n        other: []\n    },\n    userField: {\n        space: [],\n        ground: [],\n        foot: [],\n        env:[],\n        other:[]\n    },\n\n    //scores \n    userScore: 0,\n    enemyScore: 0,\n\n    //passing\n    userTurn: true,\n    userPass: false,\n    enemyPass: false,\n\n    //reactors \n    userReactors: 2,\n    enemyReactors: 2,\n\n    userVictory: null\n}\n\nconst rowScore = (array) => {\n    console.log(array)\n    let score = 0\n    for (let i = 0; i < array.length; i++) {\n        score += array[i].strength\n    }\n    return score\n}\n\nconst newTotalScore = (field) => {\n    //we iterate through the field values (rows), and get the total of each rowScore\n    let total = Object.values(field).reduce((total, row) => total + (rowScore(row)), 0)\n    return total\n}\n\n\nexport const reducer = (state, action) => {\n    switch (action.type) {\n\n        case 'CHANGE_USERNAME_INPUT':\n            return { ...state, usernameInput: action.value }\n            break;\n\n        case 'CHANGE_PASSWORD_INPUT':\n            return { ...state, passwordInput: action.value }\n            break;\n\n        case 'SET_USER':\n            return { ...state, user: action.user, ownedCards: action.ownedCards, games: action.games, gameOn: false }\n            break;\n\n        case 'SET_GAME_CARDS':\n            //TODO -> Gets sent a list of chosen cards to set as gameCards from the selection screen            \n            return { ...state, gameCards: action.gameCards, enemyGameCards: action.enemyGameCards, drawHands: true }\n            break;\n\n        case 'SET_HANDS':\n            //Separate from game cards because hand is drawn in the battlefield, not the selection screen\n\n            let newHand = state.gameCards.slice(0, 10)\n            let newEnemyHand = state.enemyGameCards.slice(0, 10)\n\n            let newGameCards = state.gameCards.filter(card => !(newHand.includes(card)))\n            let newEnemyGameCards = state.enemyGameCards.filter(card => !(newEnemyHand.includes(card)))\n            return {\n                ...state,\n                gameCards: newGameCards,\n                enemyGameCards: newEnemyGameCards,\n                hand: newHand,\n                enemyHand: newEnemyHand,\n                gameOn: true,\n                drawHands: false\n            }\n            break;\n\n        case 'PLAY_CARD':\n            //Possible change --> send over something to indicate whether it's the enemy or user \n            let role = action.role\n\n            //Remove the card from hand\n            let updatedUserHand = state.hand.filter(card => card.id !== action.card.id)\n\n            //Update the row, then update the field with that updated row \n            let updatedUserRow = [...state.userField[role], action.card]\n            let updatedUserField = { ...state.userField, [role]: updatedUserRow }\n\n            //Find the new total, including the added card\n            let newUserTotal = newTotalScore(updatedUserField)\n            return { ...state, userField: updatedUserField, hand: updatedUserHand, userScore: newUserTotal }\n            break;\n\n        case 'ENEMY_PLAY':\n\n            let chosenCard = state.enemyHand.slice(0, 1)[0]\n            console.log(chosenCard)\n            let updatedEnemyHand = state.enemyHand.filter(card => card.id !== chosenCard.id)\n\n            let updatedEnemyRow = [...state.enemyField[chosenCard.role], chosenCard]\n            let updatedEnemyField = { ...state.enemyField, [chosenCard.role]: updatedEnemyRow }\n\n            let newEnemyTotal = newTotalScore(updatedEnemyField)\n            return { ...state, enemyField: updatedEnemyField, enemyHand: updatedEnemyHand, enemyScore: newEnemyTotal }\n            break;\n\n        case 'ENEMY_PASS':\n            return { ...state, enemyPass: true, userTurn: true }\n            break;\n\n        case 'USER_PASS':\n            return { ...state, userPass: true, userTurn: false }\n            break;\n\n        case 'ROUND_OVER':\n            if (state.userScore >= state.enemyScore) {\n                return { ...state, enemyReactors: (state.enemyReactors - 1) }\n            }\n            else if (state.userScore < state.enemyScore) {\n                return { ...state, userReactors: (state.userReactors - 1) }\n            }\n            break;\n\n        case 'RESET_BOARD':\n            //This is super ugly but it works. We're setting the discard to everything in userField\n            //And then we're hardcoding in a clean new userField\n            let newUserDiscard = Object.values(state.userField).splice(0).flat();\n            let newEnemyDiscard = Object.values(state.enemyField).splice(0).flat();\n            let cleanUserField = {\n                userField: {\n                    space: [],\n                    ground: [],\n                    foot: [],\n                    env:[],\n                    other:[]\n                }\n            }\n            let cleanEnemyField = {\n                enemyField: {\n                    space: [],\n                    ground: [],\n                    foot: [],\n                    env:[],\n                    other:[]\n                }\n            }\n            return {\n                ...state,\n                userField: cleanUserField.userField,\n                enemyField: cleanEnemyField.enemyField,\n                userPass: false,\n                enemyPass: false,\n                userDiscard: [...state.userDiscard, ...newUserDiscard],\n                enemyDiscard: [...state.enemyDiscard, ...newEnemyDiscard],\n                userScore: 0,\n                enemyScore: 0\n            }\n            break;\n\n        case 'GAME_OVER':\n            return {\n                ...state,\n                userVictory: action.userVictory,\n                games: action.games,\n                userReactors: 2,\n                enemyReactors: 2,\n                gameOn: false,\n                userDiscard: [],\n                enemyDiscard: []\n            }\n            break;\n        \n        // ABILITIES \n        case 'DEVELOP':\n            console.log('develop')\n            return{...state}\n            break;\n        \n        case 'COLD':\n            //problem - the row scores are calculated in place\n            //so how do I set one row to 1 without changing the others? \n            //It needs to be a change to rowScore (so that it works in the score boxes too)\n            console.log('cold')\n            return{...state}\n            break;\n        \n        case 'ROCKY':\n            console.log('rocky')\n            return{...state}\n            break;\n        \n        case 'FLARE':\n            console.log('flare')\n            return{...state}\n            break;\n        \n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}