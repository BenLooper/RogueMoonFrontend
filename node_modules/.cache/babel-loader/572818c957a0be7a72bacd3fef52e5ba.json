{"ast":null,"code":"export const initialState = {\n  //login\n  usernameInput: '',\n  passwordInput: '',\n  user: {},\n  ownedCards: [],\n  token: '',\n  //gameboard\n  gameOn: false,\n  gameCards: [],\n  enemyField: {\n    space: [],\n    ground: [],\n    foot: []\n  },\n  userField: {\n    space: [],\n    ground: [],\n    foot: []\n  },\n  //scores \n  userScores: {\n    total: 0,\n    space: 0,\n    ground: 0,\n    foot: 0\n  },\n  enemyScores: {\n    total: 0,\n    space: 0,\n    ground: 0,\n    foot: 0\n  }\n};\n\nconst rowScore = array => {\n  let score = 0;\n\n  for (let i = 0; i < array.length; i++) {\n    score += array[i].strength;\n  }\n\n  return score;\n};\n\nconst newTotalScore = field => {\n  //we iterate through the field values (rows), and get the total of each rowScore\n  let total = Object.values(field).reduce((total, row) => total + rowScore(row), 0);\n  return total;\n};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE_USERNAME_INPUT':\n      return { ...state,\n        usernameInput: action.value\n      };\n      break;\n\n    case 'CHANGE_PASSWORD_INPUT':\n      return { ...state,\n        passwordInput: action.value\n      };\n      break;\n\n    case 'SET_USER':\n      return { ...state,\n        user: action.user,\n        token: action.token,\n        ownedCards: action.ownedCards\n      };\n      break;\n\n    case 'SET_GAME_CARDS':\n      //TODO -> Gets sent a list of chosen cards to set as gameCards\n      return { ...state,\n        gameCards: state.ownedCards,\n        gameOn: true\n      };\n      break;\n\n    case 'SET_HAND':\n      //TODO -> Hand is randomly drawn from gameCards\n      let hand = state.gameCards.slice(5, 10);\n      return { ...state,\n        hand: hand\n      };\n      break;\n\n    case 'PLAY_CARD':\n      //Possible change --> send over something to indicate whether it's the enemy or user \n      let role = action.role;\n      let updatedHand = state.hand.filter(card => card.id !== action.card.id);\n      let updatedRow = [...state.userField[action.role], action.card];\n      let updatedField = { ...state.userField,\n        [role]: updatedRow\n      };\n      let newTotal = newTotalScore(updatedField);\n      return { ...state,\n        userField: updatedField,\n        hand: updatedHand,\n        userScore: newTotal\n      };\n      break;\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/ben/flatiron/work/mod5/moon-gwent/frontend/src/store/reducers/index.js"],"names":["initialState","usernameInput","passwordInput","user","ownedCards","token","gameOn","gameCards","enemyField","space","ground","foot","userField","userScores","total","enemyScores","rowScore","array","score","i","length","strength","newTotalScore","field","Object","values","reduce","row","reducer","state","action","type","value","hand","slice","role","updatedHand","filter","card","id","updatedRow","updatedField","newTotal","userScore"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAG;AACxB;AACAC,EAAAA,aAAa,EAAE,EAFS;AAGxBC,EAAAA,aAAa,EAAE,EAHS;AAIxBC,EAAAA,IAAI,EAAE,EAJkB;AAKxBC,EAAAA,UAAU,EAAE,EALY;AAMxBC,EAAAA,KAAK,EAAE,EANiB;AAQxB;AACAC,EAAAA,MAAM,EAAE,KATgB;AAUxBC,EAAAA,SAAS,EAAE,EAVa;AAWxBC,EAAAA,UAAU,EAAE;AACRC,IAAAA,KAAK,EAAE,EADC;AAERC,IAAAA,MAAM,EAAE,EAFA;AAGRC,IAAAA,IAAI,EAAE;AAHE,GAXY;AAgBxBC,EAAAA,SAAS,EAAE;AACPH,IAAAA,KAAK,EAAE,EADA;AAEPC,IAAAA,MAAM,EAAE,EAFD;AAGPC,IAAAA,IAAI,EAAE;AAHC,GAhBa;AAuBxB;AACAE,EAAAA,UAAU,EAAE;AACRC,IAAAA,KAAK,EAAE,CADC;AAERL,IAAAA,KAAK,EAAE,CAFC;AAGRC,IAAAA,MAAM,EAAE,CAHA;AAIRC,IAAAA,IAAI,EAAE;AAJE,GAxBY;AA8BxBI,EAAAA,WAAW,EAAE;AACTD,IAAAA,KAAK,EAAE,CADE;AAETL,IAAAA,KAAK,EAAE,CAFE;AAGTC,IAAAA,MAAM,EAAE,CAHC;AAITC,IAAAA,IAAI,EAAE;AAJG;AA9BW,CAArB;;AAsCP,MAAMK,QAAQ,GAAIC,KAAD,IAAW;AACxB,MAAIC,KAAK,GAAG,CAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnCD,IAAAA,KAAK,IAAID,KAAK,CAACE,CAAD,CAAL,CAASE,QAAlB;AACH;;AACD,SAAOH,KAAP;AACH,CAND;;AAQA,MAAMI,aAAa,GAAIC,KAAD,IAAW;AAC7B;AACA,MAAIT,KAAK,GAAGU,MAAM,CAACC,MAAP,CAAcF,KAAd,EAAqBG,MAArB,CAA4B,CAACZ,KAAD,EAAQa,GAAR,KAAgBb,KAAK,GAAIE,QAAQ,CAACW,GAAD,CAA7D,EAAqE,CAArE,CAAZ;AACA,SAAOb,KAAP;AACH,CAJD;;AAMA,OAAO,MAAMc,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAK,uBAAL;AACI,aAAO,EAAE,GAAGF,KAAL;AAAY5B,QAAAA,aAAa,EAAE6B,MAAM,CAACE;AAAlC,OAAP;AACA;;AAEJ,SAAK,uBAAL;AACI,aAAO,EAAE,GAAGH,KAAL;AAAY3B,QAAAA,aAAa,EAAE4B,MAAM,CAACE;AAAlC,OAAP;AACA;;AAEJ,SAAK,UAAL;AACI,aAAO,EAAE,GAAGH,KAAL;AAAY1B,QAAAA,IAAI,EAAE2B,MAAM,CAAC3B,IAAzB;AAA+BE,QAAAA,KAAK,EAAEyB,MAAM,CAACzB,KAA7C;AAAoDD,QAAAA,UAAU,EAAE0B,MAAM,CAAC1B;AAAvE,OAAP;AACA;;AAEJ,SAAK,gBAAL;AACI;AACA,aAAO,EAAE,GAAGyB,KAAL;AAAYtB,QAAAA,SAAS,EAAEsB,KAAK,CAACzB,UAA7B;AAAyCE,QAAAA,MAAM,EAAE;AAAjD,OAAP;AACA;;AAEJ,SAAK,UAAL;AACI;AACA,UAAI2B,IAAI,GAAGJ,KAAK,CAACtB,SAAN,CAAgB2B,KAAhB,CAAsB,CAAtB,EAAyB,EAAzB,CAAX;AACA,aAAO,EAAE,GAAGL,KAAL;AAAYI,QAAAA,IAAI,EAAEA;AAAlB,OAAP;AACA;;AAEJ,SAAK,WAAL;AACI;AACA,UAAIE,IAAI,GAAGL,MAAM,CAACK,IAAlB;AACA,UAAIC,WAAW,GAAGP,KAAK,CAACI,IAAN,CAAWI,MAAX,CAAkBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYT,MAAM,CAACQ,IAAP,CAAYC,EAAlD,CAAlB;AACA,UAAIC,UAAU,GAAG,CAAC,GAAGX,KAAK,CAACjB,SAAN,CAAgBkB,MAAM,CAACK,IAAvB,CAAJ,EAAkCL,MAAM,CAACQ,IAAzC,CAAjB;AACA,UAAIG,YAAY,GAAG,EAAE,GAAGZ,KAAK,CAACjB,SAAX;AAAsB,SAACuB,IAAD,GAAQK;AAA9B,OAAnB;AACA,UAAIE,QAAQ,GAAGpB,aAAa,CAACmB,YAAD,CAA5B;AACA,aAAO,EAAE,GAAGZ,KAAL;AAAYjB,QAAAA,SAAS,EAAE6B,YAAvB;AAAqCR,QAAAA,IAAI,EAAEG,WAA3C;AAAwDO,QAAAA,SAAS,EAAED;AAAnE,OAAP;AACA;;AAEJ;AACI,aAAOb,KAAP;AApCR;AAsCH,CAvCM","sourcesContent":["export const initialState = {\n    //login\n    usernameInput: '',\n    passwordInput: '',\n    user: {},\n    ownedCards: [],\n    token: '',\n\n    //gameboard\n    gameOn: false,\n    gameCards: [],\n    enemyField: {\n        space: [],\n        ground: [],\n        foot: []\n    },\n    userField: {\n        space: [],\n        ground: [],\n        foot: []\n    },\n    \n\n    //scores \n    userScores: {\n        total: 0,\n        space: 0,\n        ground: 0,\n        foot: 0\n    },\n    enemyScores: {\n        total: 0,\n        space: 0,\n        ground: 0,\n        foot: 0\n    },\n}\n\nconst rowScore = (array) => {\n    let score = 0\n    for (let i = 0; i < array.length; i++) {\n        score += array[i].strength\n    }\n    return score\n}\n\nconst newTotalScore = (field) => {\n    //we iterate through the field values (rows), and get the total of each rowScore\n    let total = Object.values(field).reduce((total, row) => total + (rowScore(row)), 0)\n    return total\n}\n\nexport const reducer = (state, action) => {\n    switch (action.type) {\n\n        case 'CHANGE_USERNAME_INPUT':\n            return { ...state, usernameInput: action.value }\n            break;\n\n        case 'CHANGE_PASSWORD_INPUT':\n            return { ...state, passwordInput: action.value }\n            break;\n\n        case 'SET_USER':\n            return { ...state, user: action.user, token: action.token, ownedCards: action.ownedCards }\n            break;\n\n        case 'SET_GAME_CARDS':\n            //TODO -> Gets sent a list of chosen cards to set as gameCards\n            return { ...state, gameCards: state.ownedCards, gameOn: true }\n            break;\n\n        case 'SET_HAND':\n            //TODO -> Hand is randomly drawn from gameCards\n            let hand = state.gameCards.slice(5, 10);\n            return { ...state, hand: hand }\n            break;\n\n        case 'PLAY_CARD':\n            //Possible change --> send over something to indicate whether it's the enemy or user \n            let role = action.role\n            let updatedHand = state.hand.filter(card => card.id !== action.card.id)\n            let updatedRow = [...state.userField[action.role], action.card]\n            let updatedField = { ...state.userField, [role]: updatedRow }\n            let newTotal = newTotalScore(updatedField)\n            return { ...state, userField: updatedField, hand: updatedHand, userScore: newTotal }\n            break;\n\n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}