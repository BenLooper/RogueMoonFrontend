{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ben/flatiron/work/mod5/moon-gwent/frontend/src/containers/Battlefield.js\",\n    _s = $RefreshSig$();\n\nimport { Container, Row, Col, CardGroup, Card } from 'react-bootstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport UnitCard from '../components/UnitCard.js';\n\nfunction Battlefield() {\n  _s();\n\n  const dispatch = useDispatch();\n  const gameOn = useSelector(state => state.gameOn);\n  const drawHands = useSelector(state => state.drawHands);\n  const enemyField = useSelector(state => state.enemyField);\n  const userField = useSelector(state => state.userField);\n  const hand = useSelector(state => state.hand);\n  const enemyHand = useSelector(state => state.enemyHand); //Set the stage...SET_GAME_CARDS will eventually be called in pre-game component\n\n  useEffect(() => {\n    if (gameOn === false && drawHands === true) {\n      let handCounter = 0;\n      let newEnemyHand = [];\n      let newHand = [];\n\n      while (handCounter < 10) {\n        newHand = [...newHand, state.gameCards[Math.floor(Math.random() * state.gameCards.length)]];\n        newEnemyHand = [...newEnemyHand, state.enemyGameCards[Math.floor(Math.random() * state.enemyGameCards.length)]];\n      }\n\n      dispatch({\n        type: 'SET_HAND'\n      });\n    }\n  }, [gameOn]);\n\n  const rowScore = array => {\n    let score = 0;\n\n    for (let i = 0; i < array.length; i++) {\n      score += array[i].strength;\n    }\n\n    return score;\n  };\n\n  return (\n    /*#__PURE__*/\n    //These rows populate with played cards\n    //Furthest left is total strength, then active buff, then cards\n    _jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          style: {\n            border: 'solid'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: 10,\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"card-tray\",\n            children: enemyField.space.map(card => /*#__PURE__*/_jsxDEV(UnitCard, {\n              card: card\n            }, card.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 78\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          style: {\n            border: 'solid'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: 10,\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"card-tray\",\n            children: enemyField.ground.map(card => /*#__PURE__*/_jsxDEV(UnitCard, {\n              card: card\n            }, card.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 79\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          style: {\n            border: 'solid'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: 10,\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"card-tray\",\n            children: enemyField.foot.map(card => /*#__PURE__*/_jsxDEV(UnitCard, {\n              card: card\n            }, card.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 77\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          style: {\n            border: 'solid'\n          },\n          children: rowScore(userField.foot)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: 10,\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"card-tray\",\n            children: userField.foot.map(card => /*#__PURE__*/_jsxDEV(UnitCard, {\n              card: card\n            }, card.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 76\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          style: {\n            border: 'solid'\n          },\n          children: rowScore(userField.ground)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: 10,\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"card-tray\",\n            children: userField.ground.map(card => /*#__PURE__*/_jsxDEV(UnitCard, {\n              card: card\n            }, card.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 78\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          style: {\n            border: 'solid'\n          },\n          children: rowScore(userField.space)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: 10,\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"card-tray\",\n            children: userField.space.map(card => /*#__PURE__*/_jsxDEV(UnitCard, {\n              card: card\n            }, card.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 77\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"card-tray\",\n        children: hand.map(card => /*#__PURE__*/_jsxDEV(UnitCard, {\n          card: card,\n          hand: true\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 35\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_s(Battlefield, \"lntwlw3m8vI26j2KFCLrF8idMv0=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Battlefield;\nexport default Battlefield;\n\nvar _c;\n\n$RefreshReg$(_c, \"Battlefield\");","map":{"version":3,"sources":["/Users/ben/flatiron/work/mod5/moon-gwent/frontend/src/containers/Battlefield.js"],"names":["Container","Row","Col","CardGroup","Card","useSelector","useDispatch","useEffect","UnitCard","Battlefield","dispatch","gameOn","state","drawHands","enemyField","userField","hand","enemyHand","handCounter","newEnemyHand","newHand","gameCards","Math","floor","random","length","enemyGameCards","type","rowScore","array","score","i","strength","border","space","map","card","id","ground","foot"],"mappings":"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","sourcesContent":["import { Container, Row, Col, CardGroup, Card } from 'react-bootstrap'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useEffect } from 'react'\nimport UnitCard from '../components/UnitCard.js'\n\nfunction Battlefield() {\n\n    const dispatch = useDispatch()\n\n    const gameOn = useSelector((state) => state.gameOn)\n    const drawHands = useSelector((state) => state.drawHands)\n\n    const enemyField = useSelector((state) => state.enemyField)\n    const userField = useSelector((state) => state.userField)\n\n    const hand = useSelector((state) => state.hand)\n    const enemyHand = useSelector((state) => state.enemyHand)\n\n    //Set the stage...SET_GAME_CARDS will eventually be called in pre-game component\n    useEffect(() => {\n        if (gameOn === false && drawHands === true) {\n            let handCounter = 0\n            let newEnemyHand = []\n            let newHand = []\n            while (handCounter < 10){\n                newHand = [...newHand,state.gameCards[Math.floor(Math.random() * state.gameCards.length)]]\n                newEnemyHand = [...newEnemyHand,state.enemyGameCards[Math.floor(Math.random() * state.enemyGameCards.length)]]\n            }\n            dispatch({ type: 'SET_HAND' })\n        }\n    }, [gameOn])\n    \n    const rowScore = (array) => {\n        let score = 0\n        for (let i = 0; i < array.length; i++) {\n            score += array[i].strength\n        }\n        return score\n    }\n\n    return (\n        //These rows populate with played cards\n        //Furthest left is total strength, then active buff, then cards\n        <Container >\n            <Row>\n                <Col style={{ border: 'solid' }}>\n\n                </Col>\n                <Col xs={10}>\n                    <Row className=\"card-tray\">{enemyField.space.map(card => <UnitCard card={card} key={card.id} />)}</Row>\n                </Col>\n\n            </Row>\n            <Row>\n                <Col style={{ border: 'solid' }}>\n                </Col>\n                <Col xs={10}>\n                    <Row className=\"card-tray\">{enemyField.ground.map(card => <UnitCard card={card} key={card.id} />)}</Row>\n                </Col>\n\n            </Row>\n            <Row>\n                <Col style={{ border: 'solid' }}>\n                </Col>\n                <Col xs={10}>\n                    <Row className=\"card-tray\">{enemyField.foot.map(card => <UnitCard card={card} key={card.id} />)}</Row>\n                </Col>\n\n            </Row>\n            <br></br>\n            <Row>\n                <Col style={{ border: 'solid' }}>\n                    {rowScore(userField.foot)}\n                </Col>\n                <Col xs={10}>\n                    <Row className=\"card-tray\">{userField.foot.map(card => <UnitCard card={card} key={card.id} />)}</Row>\n                </Col>\n\n            </Row>\n            <Row>\n                <Col style={{ border: 'solid' }}>\n                    {rowScore(userField.ground)}\n                </Col>\n                <Col xs={10}>\n                    <Row className=\"card-tray\">{userField.ground.map(card => <UnitCard card={card} key={card.id} />)}</Row>\n                </Col>\n\n            </Row>\n            <Row>\n                <Col style={{ border: 'solid' }}>\n                    {rowScore(userField.space)}\n                </Col>\n                <Col xs={10}>\n                    <Row className=\"card-tray\">{userField.space.map(card => <UnitCard card={card} key={card.id} />)}</Row>\n                </Col>\n\n            </Row>\n            <br></br>\n            {/* This row populates with cards drawn from a users deck.  */}\n            <Row className=\"card-tray\">\n                {hand.map(card => <UnitCard card={card} hand={true} key={card.id} />)}\n            </Row>\n        </Container>\n    )\n}\n\nexport default Battlefield;"]},"metadata":{},"sourceType":"module"}