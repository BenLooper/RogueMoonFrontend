{"ast":null,"code":"export const initialState = {\n  //login\n  usernameInput: '',\n  passwordInput: '',\n  user: {},\n  ownedCards: [],\n  token: '',\n  //gameboard\n  gameCards: [],\n  enemySpace: [],\n  enemyGround: [],\n  enemyFoot: [],\n  userFoot: [],\n  userGround: [],\n  userSpace: [],\n  hand: []\n};\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE_USERNAME_INPUT':\n      return { ...state,\n        usernameInput: action.value\n      };\n      break;\n\n    case 'CHANGE_PASSWORD_INPUT':\n      return { ...state,\n        passwordInput: action.value\n      };\n      break;\n\n    case 'SET_USER':\n      return { ...state,\n        user: action.user,\n        token: action.token,\n        ownedCards: action.ownedCards\n      };\n      break;\n\n    case 'PLAY_CARD':\n      //Possible change --> send over something to indicate whether it's the enemy or user \n      let role = `user${action.role}`;\n      let updatedHand = state.hand.filter(card => card.id !== action.card.id);\n      let updatedRow = [...state[role], action.card];\n      return { ...state,\n        [role]: updatedRow,\n        hand: updatedHand\n      };\n      break;\n\n    case 'SET_HAND':\n      let shuffled = state.gameCards.slice(0),\n          i = state.gameCards.length,\n          temp,\n          index;\n\n      while (i--) {\n        index = Math.floor((i + 1) * Math.random());\n        temp = shuffled[index];\n        shuffled[index] = shuffled[i];\n        shuffled[i] = temp;\n      }\n\n      return shuffled.slice(0, 11);\n      break;\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/ben/flatiron/work/mod5/moon-gwent/frontend/src/store/reducers/index.js"],"names":["initialState","usernameInput","passwordInput","user","ownedCards","token","gameCards","enemySpace","enemyGround","enemyFoot","userFoot","userGround","userSpace","hand","reducer","state","action","type","value","role","updatedHand","filter","card","id","updatedRow","shuffled","slice","i","length","temp","index","Math","floor","random"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAG;AACxB;AACAC,EAAAA,aAAa,EAAE,EAFS;AAGxBC,EAAAA,aAAa,EAAE,EAHS;AAIxBC,EAAAA,IAAI,EAAE,EAJkB;AAKxBC,EAAAA,UAAU,EAAE,EALY;AAMxBC,EAAAA,KAAK,EAAE,EANiB;AAQxB;AACAC,EAAAA,SAAS,EAAE,EATa;AAUxBC,EAAAA,UAAU,EAAE,EAVY;AAWxBC,EAAAA,WAAW,EAAE,EAXW;AAYxBC,EAAAA,SAAS,EAAE,EAZa;AAaxBC,EAAAA,QAAQ,EAAE,EAbc;AAcxBC,EAAAA,UAAU,EAAE,EAdY;AAexBC,EAAAA,SAAS,EAAE,EAfa;AAgBxBC,EAAAA,IAAI,EAAE;AAhBkB,CAArB;AAmBP,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAK,uBAAL;AACI,aAAO,EAAE,GAAGF,KAAL;AAAYd,QAAAA,aAAa,EAAEe,MAAM,CAACE;AAAlC,OAAP;AACA;;AAEJ,SAAK,uBAAL;AACI,aAAO,EAAE,GAAGH,KAAL;AAAYb,QAAAA,aAAa,EAAEc,MAAM,CAACE;AAAlC,OAAP;AACA;;AAEJ,SAAK,UAAL;AACI,aAAO,EAAE,GAAGH,KAAL;AAAYZ,QAAAA,IAAI,EAAEa,MAAM,CAACb,IAAzB;AAA+BE,QAAAA,KAAK,EAAEW,MAAM,CAACX,KAA7C;AAAoDD,QAAAA,UAAU,EAAEY,MAAM,CAACZ;AAAvE,OAAP;AACA;;AAEJ,SAAK,WAAL;AACI;AACA,UAAIe,IAAI,GAAI,OAAMH,MAAM,CAACG,IAAK,EAA9B;AACA,UAAIC,WAAW,GAAGL,KAAK,CAACF,IAAN,CAAWQ,MAAX,CAAkBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYP,MAAM,CAACM,IAAP,CAAYC,EAAlD,CAAlB;AACA,UAAIC,UAAU,GAAG,CAAC,GAAGT,KAAK,CAACI,IAAD,CAAT,EAAiBH,MAAM,CAACM,IAAxB,CAAjB;AACA,aAAO,EAAE,GAAGP,KAAL;AAAY,SAACI,IAAD,GAAQK,UAApB;AAAgCX,QAAAA,IAAI,EAAEO;AAAtC,OAAP;AACA;;AAEJ,SAAK,UAAL;AACI,UAAIK,QAAQ,GAAGV,KAAK,CAACT,SAAN,CAAgBoB,KAAhB,CAAsB,CAAtB,CAAf;AAAA,UAAyCC,CAAC,GAAGZ,KAAK,CAACT,SAAN,CAAgBsB,MAA7D;AAAA,UAAqEC,IAArE;AAAA,UAA2EC,KAA3E;;AACA,aAAOH,CAAC,EAAR,EAAY;AACRG,QAAAA,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACL,CAAC,GAAG,CAAL,IAAUI,IAAI,CAACE,MAAL,EAArB,CAAR;AACAJ,QAAAA,IAAI,GAAGJ,QAAQ,CAACK,KAAD,CAAf;AACAL,QAAAA,QAAQ,CAACK,KAAD,CAAR,GAAkBL,QAAQ,CAACE,CAAD,CAA1B;AACAF,QAAAA,QAAQ,CAACE,CAAD,CAAR,GAAcE,IAAd;AACH;;AACD,aAAOJ,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkB,EAAlB,CAAP;AACA;;AAEJ;AACI,aAAOX,KAAP;AAlCR;AAoCH,CArCM","sourcesContent":["export const initialState = {\n    //login\n    usernameInput: '',\n    passwordInput: '',\n    user: {},\n    ownedCards: [],\n    token: '',\n\n    //gameboard\n    gameCards: [],\n    enemySpace: [],\n    enemyGround: [],\n    enemyFoot: [],\n    userFoot: [],\n    userGround: [],\n    userSpace: [],\n    hand: []\n}\n\nexport const reducer = (state, action) => {\n    switch (action.type) {\n\n        case 'CHANGE_USERNAME_INPUT':\n            return { ...state, usernameInput: action.value }\n            break;\n\n        case 'CHANGE_PASSWORD_INPUT':\n            return { ...state, passwordInput: action.value }\n            break;\n\n        case 'SET_USER':\n            return { ...state, user: action.user, token: action.token, ownedCards: action.ownedCards }\n            break;\n\n        case 'PLAY_CARD':\n            //Possible change --> send over something to indicate whether it's the enemy or user \n            let role = `user${action.role}`\n            let updatedHand = state.hand.filter(card => card.id !== action.card.id)\n            let updatedRow = [...state[role], action.card]\n            return { ...state, [role]: updatedRow, hand: updatedHand }\n            break;\n\n        case 'SET_HAND':\n            let shuffled = state.gameCards.slice(0), i = state.gameCards.length, temp, index;\n            while (i--) {\n                index = Math.floor((i + 1) * Math.random());\n                temp = shuffled[index];\n                shuffled[index] = shuffled[i];\n                shuffled[i] = temp;\n            }\n            return shuffled.slice(0, 11);\n            break;\n\n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}