{"ast":null,"code":"export const initialState = {\n  //login\n  usernameInput: '',\n  passwordInput: '',\n  user: {},\n  ownedCards: [],\n  token: '',\n  //gameboard\n  gameOn: false,\n  gameCards: [],\n  hand: [],\n  enemyField: {\n    space: [],\n    ground: [],\n    foot: []\n  },\n  userField: {\n    space: [],\n    ground: [],\n    foot: []\n  },\n  //scores \n  userScore: 0,\n  enemyScore: 0,\n  //passing\n  userPass: false,\n  enemyPass: true,\n  //reactors \n  userReactors: 2,\n  enemyReactors: 2\n};\n\nconst rowScore = array => {\n  let score = 0;\n\n  for (let i = 0; i < array.length; i++) {\n    score += array[i].strength;\n  }\n\n  return score;\n};\n\nconst newTotalScore = field => {\n  //we iterate through the field values (rows), and get the total of each rowScore\n  let total = Object.values(field).reduce((total, row) => total + rowScore(row), 0);\n  return total;\n};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE_USERNAME_INPUT':\n      return { ...state,\n        usernameInput: action.value\n      };\n      break;\n\n    case 'CHANGE_PASSWORD_INPUT':\n      return { ...state,\n        passwordInput: action.value\n      };\n      break;\n\n    case 'SET_USER':\n      return { ...state,\n        user: action.user,\n        token: action.token,\n        ownedCards: action.ownedCards\n      };\n      break;\n\n    case 'SET_GAME_CARDS':\n      //TODO -> Gets sent a list of chosen cards to set as gameCards\n      return { ...state,\n        gameCards: state.ownedCards,\n        gameOn: true\n      };\n      break;\n\n    case 'SET_HAND':\n      //TODO -> Hand is randomly drawn from gameCards\n      let hand = state.gameCards.slice(5, 10);\n      return { ...state,\n        hand: hand\n      };\n      break;\n\n    case 'PLAY_CARD':\n      //Possible change --> send over something to indicate whether it's the enemy or user \n      let role = action.role;\n      let updatedHand = state.hand.filter(card => card.id !== action.card.id);\n      let updatedRow = [...state.userField[role], action.card];\n      let updatedField = { ...state.userField,\n        [role]: updatedRow\n      };\n      let newTotal = newTotalScore(updatedField);\n      return { ...state,\n        userField: updatedField,\n        hand: updatedHand,\n        userScore: newTotal\n      };\n      break;\n\n    case 'USER_PASS':\n      return { ...state,\n        userPass: true\n      };\n      break;\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/ben/flatiron/work/mod5/moon-gwent/frontend/src/store/reducers/index.js"],"names":["initialState","usernameInput","passwordInput","user","ownedCards","token","gameOn","gameCards","hand","enemyField","space","ground","foot","userField","userScore","enemyScore","userPass","enemyPass","userReactors","enemyReactors","rowScore","array","score","i","length","strength","newTotalScore","field","total","Object","values","reduce","row","reducer","state","action","type","value","slice","role","updatedHand","filter","card","id","updatedRow","updatedField","newTotal"],"mappings":"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","sourcesContent":["export const initialState = {\n    //login\n    usernameInput: '',\n    passwordInput: '',\n    user: {},\n    ownedCards: [],\n    token: '',\n\n    //gameboard\n    gameOn: false,\n    gameCards: [],\n    hand: [],\n    enemyField: {\n        space: [],\n        ground: [],\n        foot: []\n    },\n    userField: {\n        space: [],\n        ground: [],\n        foot: []\n    },\n    \n    //scores \n    userScore:0,\n    enemyScore:0,\n\n    //passing\n    userPass: false,\n    enemyPass: true,\n\n    //reactors \n    userReactors: 2,\n    enemyReactors: 2\n}\n\nconst rowScore = (array) => {\n    let score = 0\n    for (let i = 0; i < array.length; i++) {\n        score += array[i].strength\n    }\n    return score\n}\n\nconst newTotalScore = (field) => {\n    //we iterate through the field values (rows), and get the total of each rowScore\n    let total = Object.values(field).reduce((total, row) => total + (rowScore(row)), 0)\n    return total\n}\n\nexport const reducer = (state, action) => {\n    switch (action.type) {\n\n        case 'CHANGE_USERNAME_INPUT':\n            return { ...state, usernameInput: action.value }\n            break;\n\n        case 'CHANGE_PASSWORD_INPUT':\n            return { ...state, passwordInput: action.value }\n            break;\n\n        case 'SET_USER':\n            return { ...state, user: action.user, token: action.token, ownedCards: action.ownedCards }\n            break;\n\n        case 'SET_GAME_CARDS':\n            //TODO -> Gets sent a list of chosen cards to set as gameCards\n            return { ...state, gameCards: state.ownedCards, gameOn: true }\n            break;\n\n        case 'SET_HAND':\n            //TODO -> Hand is randomly drawn from gameCards\n            let hand = state.gameCards.slice(5, 10);\n            return { ...state, hand: hand }\n            break;\n\n        case 'PLAY_CARD':\n            //Possible change --> send over something to indicate whether it's the enemy or user \n            let role = action.role\n            let updatedHand = state.hand.filter(card => card.id !== action.card.id)\n            let updatedRow = [...state.userField[role], action.card]\n            let updatedField = { ...state.userField, [role]: updatedRow }\n            let newTotal = newTotalScore(updatedField)\n            return { ...state, userField: updatedField, hand: updatedHand, userScore: newTotal }\n            break;\n\n        case 'USER_PASS':\n            return {...state, userPass:true}\n            break;\n\n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}