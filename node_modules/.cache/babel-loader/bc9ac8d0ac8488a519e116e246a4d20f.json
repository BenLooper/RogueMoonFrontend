{"ast":null,"code":"const ownedCards = [{\n  id: 1,\n  name: 'Develop',\n  image: 'https://opengameart.org/sites/default/files/styles/medium/public/coruscant_by_night_by_jfliesenborghs-d93rhyn_500.jpg',\n  flavor_text: 'Level the playing field',\n  is_special: true,\n  role: 'env',\n  strength: 0,\n  ability: 'develop'\n}, {\n  id: 2,\n  name: 'Cold of Space',\n  image: 'https://picsum.photos/200/300',\n  flavor_text: 'So cold...',\n  is_special: true,\n  role: 'env',\n  strength: 0,\n  ability: 'cold'\n}, {\n  id: 3,\n  name: \"Rocky Terrain\",\n  image: 'https://picsum.photos/200/300',\n  flavor_text: \"Too many rocks!\",\n  is_special: true,\n  role: 'env',\n  strength: 0,\n  ability: 'rocky'\n}, {\n  id: 4,\n  name: \"Solar Flare\",\n  image: 'https://picsum.photos/200/300',\n  flavor_text: \"Solar Flare, get to the surface!\",\n  is_special: true,\n  role: 'env',\n  strength: 0,\n  ability: 'flare'\n}, {\n  id: 5,\n  name: \"Drone\",\n  image: 'https://picsum.photos/200/300',\n  flavor_text: \"Stupid hunk of junk...\",\n  is_special: true,\n  role: 'foot',\n  strength: 0,\n  ability: 'decoy'\n}, {\n  id: 6,\n  name: \"Talon Fighter\",\n  image: 'https://icon-library.com/images/pngtree-spacecraftspaceshipshipspacealien-line-icon--vector-isol-png-image_310939.jpg',\n  flavor_text: \"It feels weird to shoot at the moon\",\n  is_special: false,\n  role: 'space',\n  strength: 6,\n  ability: null\n}, {\n  id: 7,\n  name: \"Space Marine\",\n  image: 'https://picsum.photos/200/300',\n  flavor_text: \"Here I was thinking I'd end up in Hawaii\",\n  is_special: false,\n  role: 'foot',\n  strength: 4,\n  ability: 'close-combat'\n}, {\n  id: 8,\n  name: \"Talon Bomber\",\n  image: 'https://picsum.photos/200/300',\n  flavor_text: \"Ok this feels a little unfair...\",\n  is_special: false,\n  role: 'space',\n  strength: 8,\n  ability: 'overwhelm'\n}, {\n  id: 9,\n  name: \"Talon Skiff\",\n  image: 'https://picsum.photos/200/300',\n  flavor_text: \"They won't even see us coming\",\n  is_special: false,\n  role: 'ground',\n  strength: 5,\n  ability: 'overwhelm'\n}, {\n  id: 10,\n  name: 'The Red Blur',\n  image: 'https://picsum.photos/200/300',\n  flavor_text: \"This better have a decent payout\",\n  is_special: false,\n  role: 'ground',\n  strength: 6\n}, {\n  id: 11,\n  name: 'Repair Ship',\n  image: 'https://picsum.photos/200/300',\n  flavor_text: \"If you didn't fly so badly, you wouldn't need us\",\n  is_special: false,\n  role: 'space',\n  strength: 5,\n  ability: 'revive'\n}, {\n  id: 12,\n  name: 'Brave Pilot',\n  image: 'https://picsum.photos/200/300',\n  flavor_text: \"Follow me to victory\",\n  is_special: false,\n  role: 'space',\n  strength: 1,\n  ability: 'inspire'\n}, {\n  id: 13,\n  name: 'Mag Bike',\n  image: 'https://picsum.photos/200/300',\n  flavor_text: \"To be honest, this is more of a canon than a bike\",\n  is_special: false,\n  role: 'ground',\n  strength: 5\n}, {\n  id: 14,\n  name: 'Envoy Teron',\n  image: 'https://picsum.photos/200/300',\n  flavor_text: \"I wish he'd just go back to Iowa already\",\n  is_special: false,\n  role: 'foot',\n  strength: 5,\n  ability: 'spy'\n}, {\n  id: 15,\n  name: 'Miner A',\n  image: 'https://picsum.photos/200/300',\n  flavor_text: \"You think this is bad, try spending a day working the lunar core\",\n  is_special: false,\n  role: 'foot',\n  strength: 1\n}, {\n  id: 16,\n  name: 'Miner B',\n  image: 'https://picsum.photos/200/300',\n  flavor_text: \"Maybe we'll finally get paid?\",\n  is_special: false,\n  role: 'foot',\n  strength: 1\n}, {\n  id: 17,\n  name: \"Lunar Citizen\",\n  image: 'https://picsum.photos/200/300',\n  flavor_text: \"I can't TAKE IT ANYMORE\",\n  is_special: false,\n  role: 'foot',\n  strength: 1\n}, {\n  id: 18,\n  name: \"Jury rigged mining cart\",\n  image: 'https://picsum.photos/200/300',\n  flavor_text: \"I can't believe this works\",\n  is_special: false,\n  role: 'ground',\n  strength: 4\n}, {\n  id: 19,\n  name: \"Old Era Rover\",\n  image: 'https://picsum.photos/200/300',\n  flavor_text: \"Hey, look what I found!\",\n  is_special: false,\n  role: 'ground',\n  strength: 4\n}, {\n  id: 20,\n  name: \"Sheil\",\n  image: 'https://picsum.photos/200/300',\n  flavor_text: 'REVOLUTION!',\n  is_special: false,\n  role: 'foot',\n  strength: 5\n}, {\n  id: 21,\n  name: \"Rachel the Rager\",\n  image: 'https://picsum.photos/200/300',\n  flavor_text: 'Oh YEAH baby',\n  is_special: false,\n  role: 'ground',\n  strength: 5\n}, {\n  id: 22,\n  name: \"Talon Frigate\",\n  image: 'https://picsum.photos/200/300',\n  flavor_text: \"We FINALLY get to use these guns\",\n  is_special: false,\n  role: 'space',\n  strength: 6\n}, {\n  id: 23,\n  name: \"ID XQYZ24\",\n  image: 'https://picsum.photos/200/300',\n  flavor_text: \"You sure you know how to fly this thing?\",\n  is_special: false,\n  role: 'space',\n  strength: 6\n}, {\n  id: 24,\n  name: \"Dr. Algo\",\n  image: 'https://picsum.photos/200/300',\n  flavor_text: \"This is all my fault...\",\n  is_special: false,\n  role: 'foot',\n  strength: 5,\n  ability: 'spy'\n}, {\n  id: 25,\n  name: \"Freedom Fighter\",\n  image: 'https://picsum.photos/200/300',\n  flavor_text: 'I hope I can put this on my resume',\n  is_special: false,\n  role: 'foot',\n  strength: 2\n}, {\n  id: 26,\n  name: \"Exosuit Miner\",\n  image: 'https://picsum.photos/200/300',\n  flavor_text: \"I feel like a GOD\",\n  is_special: false,\n  role: 'foot',\n  strength: 5\n}, {\n  id: 27,\n  name: 'Drew MoonWalker',\n  image: 'https://picsum.photos/200/300',\n  flavor_text: \"Do ya'll have any beer?\",\n  is_special: false,\n  role: 'foot',\n  strength: 10,\n  ability: 'mock'\n}];\nexport const initialState = {\n  //login\n  usernameInput: '',\n  passwordInput: '',\n  user: {\n    username: \"TEST\"\n  },\n  ownedCards: ownedCards,\n  games: [],\n  //gameboard\n  gameOn: false,\n  gameStart: false,\n  drawHands: false,\n  gameCards: [],\n  enemyGameCards: [],\n  hand: [],\n  enemyHand: [],\n  userDiscard: [],\n  enemyDiscard: [],\n  enemyField: {\n    space: [],\n    ground: [],\n    foot: [],\n    other: []\n  },\n  userField: {\n    space: [],\n    ground: [],\n    foot: [],\n    other: []\n  },\n  env: [],\n  //scores \n  userScore: 0,\n  enemyScore: 0,\n  //passing\n  userTurn: true,\n  userPass: false,\n  enemyPass: false,\n  //reactors \n  userReactors: 2,\n  enemyReactors: 2,\n  userVictory: null\n};\n\nconst rowScore = array => {\n  let score = 0;\n\n  for (let i = 0; i < array.length; i++) {\n    score += array[i].strength;\n  }\n\n  return score;\n};\n\nconst newTotalScore = field => {\n  //we iterate through the field values (rows), and get the total of each rowScore\n  let total = Object.values(field).reduce((total, row) => total + rowScore(row), 0);\n  return total;\n};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE_USERNAME_INPUT':\n      return { ...state,\n        usernameInput: action.value\n      };\n      break;\n\n    case 'CHANGE_PASSWORD_INPUT':\n      return { ...state,\n        passwordInput: action.value\n      };\n      break;\n\n    case 'SET_USER':\n      return { ...state,\n        user: action.user,\n        ownedCards: action.ownedCards,\n        games: action.games\n      };\n      break;\n\n    case 'START_GAME':\n      return { ...state,\n        gameOn: true\n      };\n      break;\n\n    case 'SET_GAME_CARDS':\n      return { ...state,\n        gameCards: action.gameCards\n      };\n      break;\n\n    case 'SET_ENEMY_GAME_CARDS':\n      return { ...state,\n        enemyGameCards: action.enemyGameCards,\n        drawHands: true\n      };\n      break;\n\n    case 'SET_HANDS':\n      //Separate from game cards because hand is drawn in the battlefield, not the selection screen\n      let newHand = state.gameCards.slice(0, 10);\n      let newEnemyHand = state.enemyGameCards.slice(0, 10);\n      let newGameCards = state.gameCards.filter(card => !newHand.includes(card));\n      let newEnemyGameCards = state.enemyGameCards.filter(card => !newEnemyHand.includes(card));\n      return { ...state,\n        gameStart: true,\n        gameCards: newGameCards,\n        enemyGameCards: newEnemyGameCards,\n        hand: newHand,\n        enemyHand: newEnemyHand,\n        drawHands: false\n      };\n      break;\n\n    case 'PLAY_CARD':\n      let role = action.role; //Remove the card from hand\n\n      let updatedUserHand = state.hand.filter(card => card.id !== action.card.id); //Update the row, then update the field with that updated row \n\n      let updatedUserRow = [...state.userField[role], action.card];\n      let updatedUserField = { ...state.userField,\n        [role]: updatedUserRow\n      }; //Find the new total, including the added card\n\n      let newUserTotal = newTotalScore(updatedUserField);\n      return { ...state,\n        userField: updatedUserField,\n        hand: updatedUserHand,\n        userScore: newUserTotal\n      };\n      break;\n\n    case 'PLAY_ENV':\n      //check to see if env already has that condition\n      let conditions = state.env.map(card => card.ability);\n\n      if (conditions.includes(action.card.ability)) {\n        return { ...state,\n          userDiscard: [...state.userDiscard, action.card],\n          hand: state.hand.filter(card => card.id !== action.card.id)\n        };\n      } else {\n        return { ...state,\n          env: [...state.env, action.card],\n          hand: state.hand.filter(card => card.id !== action.card.id)\n        };\n      }\n\n    case 'ENEMY_PLAY':\n      let randomCard;\n      let chosenCard;\n\n      if (state.enemyHand.length > 1) {\n        randomCard = Math.floor(Math.random() * Math.floor(state.enemyHand.length));\n        chosenCard = state.enemyHand[randomCard];\n      } else {\n        if (state.userScore >= state.enemyScore) {\n          chosenCard = state.enemyHand[0];\n        } else {\n          return { ...state,\n            enemyPass: true\n          };\n        }\n      }\n\n      if (chosenCard.role === 'env') {\n        let conditions = state.env.map(card => card.ability);\n\n        if (conditions.includes(chosenCard.ability)) {\n          return { ...state,\n            enemyDiscard: [...state.enemyDiscard, chosenCard],\n            enemyHand: state.enemyHand.filter(card => card.id !== chosenCard.id)\n          };\n        } else {\n          return { ...state,\n            env: [...state.env, chosenCard],\n            enemyHand: state.enemyHand.filter(card => card.id !== chosenCard.id)\n          };\n        }\n      } else {\n        let updatedEnemyHand = state.enemyHand.filter(card => card.id !== chosenCard.id);\n        let updatedEnemyRow = [...state.enemyField[chosenCard.role], chosenCard];\n        let updatedEnemyField = { ...state.enemyField,\n          [chosenCard.role]: updatedEnemyRow\n        };\n        let newEnemyTotal = newTotalScore(updatedEnemyField);\n        return { ...state,\n          enemyField: updatedEnemyField,\n          enemyHand: updatedEnemyHand,\n          enemyScore: newEnemyTotal\n        };\n      }\n\n      break;\n\n    case 'ENEMY_PASS':\n      return { ...state,\n        enemyPass: true,\n        userTurn: true\n      };\n      break;\n\n    case 'USER_PASS':\n      return { ...state,\n        userPass: true\n      };\n      break;\n\n    case 'END_TURN':\n      return { ...state,\n        userTurn: !state.userTurn\n      };\n\n    case 'ROUND_OVER':\n      if (state.userScore >= state.enemyScore) {\n        return { ...state,\n          enemyReactors: state.enemyReactors - 1\n        };\n      } else if (state.userScore < state.enemyScore) {\n        return { ...state,\n          userReactors: state.userReactors - 1\n        };\n      }\n\n      break;\n\n    case 'RESET_BOARD':\n      //This is super ugly but it works. We're setting the discard to everything in userField\n      //And then we're hardcoding in new clean fields\n      let newUserDiscard = Object.values(state.userField).splice(0).flat();\n      let newEnemyDiscard = Object.values(state.enemyField).splice(0).flat();\n      let cleanUserField = {\n        userField: {\n          space: [],\n          ground: [],\n          foot: [],\n          other: []\n        }\n      };\n      let cleanEnemyField = {\n        enemyField: {\n          space: [],\n          ground: [],\n          foot: [],\n          other: []\n        }\n      };\n      return { ...state,\n        userField: cleanUserField.userField,\n        enemyField: cleanEnemyField.enemyField,\n        userPass: false,\n        enemyPass: false,\n        userTurn: state.userScore >= state.enemyScore ? true : false,\n        env: [],\n        userDiscard: [...state.userDiscard, ...newUserDiscard],\n        enemyDiscard: [...state.enemyDiscard, ...newEnemyDiscard],\n        userScore: 0,\n        enemyScore: 0\n      };\n      break;\n\n    case 'GAME_OVER':\n      return { ...state,\n        userVictory: action.userVictory,\n        games: action.games,\n        userReactors: 2,\n        enemyReactors: 2,\n        env: [],\n        gameOn: false,\n        gameStart: false,\n        userPass: false,\n        enemyPass: false,\n        userDiscard: [],\n        enemyDiscard: []\n      };\n      break;\n    // ABILITIES \n\n    case 'DEVELOP':\n      console.log(action.userField);\n      console.log(action.oldStrength);\n      let developedUserFoot = state.userField.foot.map(card => {\n        if (card.id === action.card.id) {\n          console.log(card.strength, action.oldStrength);\n          card.strength = action.oldStrength;\n          console.log(card.strength, action.oldStrength);\n        }\n\n        ;\n        return card;\n      });\n      let developedUserGround = state.userField.ground.map(card => {\n        if (card.id === action.card.id) {\n          card.strength = action.oldStrength;\n        }\n\n        ;\n        return card;\n      });\n      let developedUserSpace = state.userField.space.map(card => {\n        if (card.id === action.card.id) {\n          card.strength = action.oldStrength;\n        }\n\n        ;\n        return card;\n      });\n      let developedEnemyFoot = state.enemyField.foot.map(card => {\n        if (card.id === action.card.id) {\n          card.strength = action.oldStrength;\n        }\n\n        ;\n        return card;\n      });\n      let developedEnemyGround = state.enemyField.ground.map(card => {\n        if (card.id === action.card.id) {\n          card.strength = action.oldStrength;\n        }\n\n        ;\n        return card;\n      });\n      let developedEnemySpace = state.enemyField.space.map(card => {\n        if (card.id === action.card.id) {\n          card.strength = action.oldStrength;\n        }\n\n        ;\n        return card;\n      });\n      let developedUserField = { ...state.userField,\n        foot: developedUserFoot,\n        ground: developedUserGround,\n        space: developedUserSpace\n      };\n      let developedEnemyField = { ...state.enemyField,\n        foot: developedEnemyFoot,\n        ground: developedEnemyGround,\n        space: developedEnemySpace\n      };\n      return { ...state,\n        env: [],\n        userField: developedUserField,\n        enemyField: developedEnemyField\n      };\n      break;\n\n    case 'COLD':\n      //change a card's strength to 1 if it's in the field, in the foot row \n      let coldRow = state.userField.foot.map(card => {\n        if (card.id === action.card.id) {\n          card.strength = 1;\n        }\n\n        ;\n        return card;\n      });\n      let coldEnemyRow = state.enemyField.foot.map(card => {\n        if (card.id === action.card.id) {\n          card.strength = 1;\n        }\n\n        ;\n        return card;\n      });\n      let coldUserField = { ...state.userField,\n        foot: coldRow\n      };\n      let coldEnemyField = { ...state.enemyField,\n        foot: coldEnemyRow\n      };\n      return { ...state,\n        userField: coldUserField,\n        enemyField: coldEnemyField,\n        userScore: newTotalScore(coldUserField),\n        enemyScore: newTotalScore(coldEnemyField)\n      };\n      break;\n\n    case 'ROCKY':\n      let rockyRow = state.userField.ground.map(card => {\n        if (card.id === action.card.id) {\n          card.strength = 1;\n        }\n\n        ;\n        return card;\n      });\n      let rockyEnemyRow = state.enemyField.ground.map(card => {\n        if (card.id === action.card.id) {\n          card.strength = 1;\n        }\n\n        ;\n        return card;\n      });\n      let rockyUserField = { ...state.userField,\n        ground: rockyRow\n      };\n      let rockyEnemyField = { ...state.enemyField,\n        ground: rockyEnemyRow\n      };\n      return { ...state,\n        userField: rockyUserField,\n        enemyField: rockyEnemyField,\n        userScore: newTotalScore(rockyUserField),\n        enemyScore: newTotalScore(rockyEnemyField)\n      };\n\n    case 'FLARE':\n      let flareRow = state.userField.space.map(card => {\n        if (card.id === action.card.id) {\n          card.strength = 1;\n        }\n\n        ;\n        return card;\n      });\n      let flareEnemyRow = state.enemyField.space.map(card => {\n        if (card.id === action.card.id) {\n          card.strength = 1;\n        }\n\n        ;\n        return card;\n      });\n      let flareUserField = { ...state.userField,\n        space: flareRow\n      };\n      let flareEnemyField = { ...state.enemyField,\n        space: flareEnemyRow\n      };\n      return { ...state,\n        userField: flareUserField,\n        enemyField: flareEnemyField,\n        userScore: newTotalScore(flareUserField),\n        enemyScore: newTotalScore(flareEnemyField)\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/17132/Documents/RogueMoonFrontend/src/index.js"],"names":["ownedCards","id","name","image","flavor_text","is_special","role","strength","ability","initialState","usernameInput","passwordInput","user","username","games","gameOn","gameStart","drawHands","gameCards","enemyGameCards","hand","enemyHand","userDiscard","enemyDiscard","enemyField","space","ground","foot","other","userField","env","userScore","enemyScore","userTurn","userPass","enemyPass","userReactors","enemyReactors","userVictory","rowScore","array","score","i","length","newTotalScore","field","total","Object","values","reduce","row","reducer","state","action","type","value","newHand","slice","newEnemyHand","newGameCards","filter","card","includes","newEnemyGameCards","updatedUserHand","updatedUserRow","updatedUserField","newUserTotal","conditions","map","randomCard","chosenCard","Math","floor","random","updatedEnemyHand","updatedEnemyRow","updatedEnemyField","newEnemyTotal","newUserDiscard","splice","flat","newEnemyDiscard","cleanUserField","cleanEnemyField","console","log","oldStrength","developedUserFoot","developedUserGround","developedUserSpace","developedEnemyFoot","developedEnemyGround","developedEnemySpace","developedUserField","developedEnemyField","coldRow","coldEnemyRow","coldUserField","coldEnemyField","rockyRow","rockyEnemyRow","rockyUserField","rockyEnemyField","flareRow","flareEnemyRow","flareUserField","flareEnemyField"],"mappings":"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","sourcesContent":["const ownedCards = [\r\n    { id: 1, name: 'Develop', image: 'https://opengameart.org/sites/default/files/styles/medium/public/coruscant_by_night_by_jfliesenborghs-d93rhyn_500.jpg', flavor_text: 'Level the playing field', is_special: true, role: 'env', strength: 0, ability: 'develop' },\r\n    { id: 2, name: 'Cold of Space', image: 'https://picsum.photos/200/300', flavor_text: 'So cold...', is_special: true, role: 'env', strength: 0, ability: 'cold' },\r\n    { id: 3, name: \"Rocky Terrain\", image: 'https://picsum.photos/200/300', flavor_text: \"Too many rocks!\", is_special: true, role: 'env', strength: 0, ability: 'rocky' },\r\n    { id: 4, name: \"Solar Flare\", image: 'https://picsum.photos/200/300', flavor_text: \"Solar Flare, get to the surface!\", is_special: true, role: 'env', strength: 0, ability: 'flare' },\r\n    { id: 5, name: \"Drone\", image: 'https://picsum.photos/200/300', flavor_text: \"Stupid hunk of junk...\", is_special: true, role: 'foot', strength: 0, ability: 'decoy' },\r\n    { id: 6, name: \"Talon Fighter\", image: 'https://icon-library.com/images/pngtree-spacecraftspaceshipshipspacealien-line-icon--vector-isol-png-image_310939.jpg', flavor_text: \"It feels weird to shoot at the moon\", is_special: false, role: 'space', strength: 6, ability: null },\r\n    { id: 7, name: \"Space Marine\", image: 'https://picsum.photos/200/300', flavor_text: \"Here I was thinking I'd end up in Hawaii\", is_special: false, role: 'foot', strength: 4, ability: 'close-combat' },\r\n    { id: 8, name: \"Talon Bomber\", image: 'https://picsum.photos/200/300', flavor_text: \"Ok this feels a little unfair...\", is_special: false, role: 'space', strength: 8, ability: 'overwhelm' },\r\n    { id: 9, name: \"Talon Skiff\", image: 'https://picsum.photos/200/300', flavor_text: \"They won't even see us coming\", is_special: false, role: 'ground', strength: 5, ability: 'overwhelm' },\r\n    { id: 10, name: 'The Red Blur', image: 'https://picsum.photos/200/300', flavor_text: \"This better have a decent payout\", is_special: false, role: 'ground', strength: 6 },\r\n    { id: 11, name: 'Repair Ship', image: 'https://picsum.photos/200/300', flavor_text: \"If you didn't fly so badly, you wouldn't need us\", is_special: false, role: 'space', strength: 5, ability: 'revive' },\r\n    { id: 12, name: 'Brave Pilot', image: 'https://picsum.photos/200/300', flavor_text: \"Follow me to victory\", is_special: false, role: 'space', strength: 1, ability: 'inspire' },\r\n    { id: 13, name: 'Mag Bike', image: 'https://picsum.photos/200/300', flavor_text: \"To be honest, this is more of a canon than a bike\", is_special: false, role: 'ground', strength: 5 },\r\n    { id: 14, name: 'Envoy Teron', image: 'https://picsum.photos/200/300', flavor_text: \"I wish he'd just go back to Iowa already\", is_special: false, role: 'foot', strength: 5, ability: 'spy' },\r\n    { id: 15, name: 'Miner A', image: 'https://picsum.photos/200/300', flavor_text: \"You think this is bad, try spending a day working the lunar core\", is_special: false, role: 'foot', strength: 1 },\r\n    { id: 16, name: 'Miner B', image: 'https://picsum.photos/200/300', flavor_text: \"Maybe we'll finally get paid?\", is_special: false, role: 'foot', strength: 1 },\r\n    { id: 17, name: \"Lunar Citizen\", image: 'https://picsum.photos/200/300', flavor_text: \"I can't TAKE IT ANYMORE\", is_special: false, role: 'foot', strength: 1 },\r\n    { id: 18, name: \"Jury rigged mining cart\", image: 'https://picsum.photos/200/300', flavor_text: \"I can't believe this works\", is_special: false, role: 'ground', strength: 4 },\r\n    { id: 19, name: \"Old Era Rover\", image: 'https://picsum.photos/200/300', flavor_text: \"Hey, look what I found!\", is_special: false, role: 'ground', strength: 4 },\r\n    { id: 20, name: \"Sheil\", image: 'https://picsum.photos/200/300', flavor_text: 'REVOLUTION!', is_special: false, role: 'foot', strength: 5 },\r\n    { id: 21, name: \"Rachel the Rager\", image: 'https://picsum.photos/200/300', flavor_text: 'Oh YEAH baby', is_special: false, role: 'ground', strength: 5 },\r\n    { id: 22, name: \"Talon Frigate\", image: 'https://picsum.photos/200/300', flavor_text: \"We FINALLY get to use these guns\", is_special: false, role: 'space', strength: 6 },\r\n    { id: 23, name: \"ID XQYZ24\", image: 'https://picsum.photos/200/300', flavor_text: \"You sure you know how to fly this thing?\", is_special: false, role: 'space', strength: 6 },\r\n    { id: 24, name: \"Dr. Algo\", image: 'https://picsum.photos/200/300', flavor_text: \"This is all my fault...\", is_special: false, role: 'foot', strength: 5, ability: 'spy' },\r\n    { id: 25, name: \"Freedom Fighter\", image: 'https://picsum.photos/200/300', flavor_text: 'I hope I can put this on my resume', is_special: false, role: 'foot', strength: 2 },\r\n    { id: 26, name: \"Exosuit Miner\", image: 'https://picsum.photos/200/300', flavor_text: \"I feel like a GOD\", is_special: false, role: 'foot', strength: 5 },\r\n    { id: 27, name: 'Drew MoonWalker', image: 'https://picsum.photos/200/300', flavor_text: \"Do ya'll have any beer?\", is_special: false, role: 'foot', strength: 10, ability: 'mock' },\r\n]\r\n\r\nexport const initialState = {\r\n    //login\r\n    usernameInput: '',\r\n    passwordInput: '',\r\n    user: { username: \"TEST\" },\r\n    ownedCards: ownedCards,\r\n    games: [],\r\n\r\n    //gameboard\r\n    gameOn: false,\r\n    gameStart: false,\r\n    drawHands: false,\r\n    gameCards: [],\r\n    enemyGameCards: [],\r\n    hand: [],\r\n    enemyHand: [],\r\n    userDiscard: [],\r\n    enemyDiscard: [],\r\n    enemyField: {\r\n        space: [],\r\n        ground: [],\r\n        foot: [],\r\n        other: []\r\n    },\r\n    userField: {\r\n        space: [],\r\n        ground: [],\r\n        foot: [],\r\n        other: []\r\n    },\r\n    env: [],\r\n\r\n    //scores \r\n    userScore: 0,\r\n    enemyScore: 0,\r\n\r\n    //passing\r\n    userTurn: true,\r\n    userPass: false,\r\n    enemyPass: false,\r\n\r\n    //reactors \r\n    userReactors: 2,\r\n    enemyReactors: 2,\r\n\r\n    userVictory: null\r\n}\r\n\r\n\r\nconst rowScore = (array) => {\r\n    let score = 0\r\n    for (let i = 0; i < array.length; i++) {\r\n        score += array[i].strength\r\n    }\r\n    return score\r\n}\r\n\r\nconst newTotalScore = (field) => {\r\n    //we iterate through the field values (rows), and get the total of each rowScore\r\n    let total = Object.values(field).reduce((total, row) => total + (rowScore(row)), 0)\r\n    return total\r\n}\r\n\r\n\r\nexport const reducer = (state, action) => {\r\n    switch (action.type) {\r\n\r\n        case 'CHANGE_USERNAME_INPUT':\r\n            return { ...state, usernameInput: action.value }\r\n            break;\r\n\r\n        case 'CHANGE_PASSWORD_INPUT':\r\n            return { ...state, passwordInput: action.value }\r\n            break;\r\n\r\n        case 'SET_USER':\r\n            return { ...state, user: action.user, ownedCards: action.ownedCards, games: action.games }\r\n            break;\r\n\r\n        case 'START_GAME':\r\n            return { ...state, gameOn: true }\r\n            break;\r\n\r\n        case 'SET_GAME_CARDS':\r\n            return { ...state, gameCards: action.gameCards }\r\n            break;\r\n\r\n        case 'SET_ENEMY_GAME_CARDS':\r\n            return { ...state, enemyGameCards: action.enemyGameCards, drawHands: true }\r\n            break;\r\n\r\n        case 'SET_HANDS':\r\n            //Separate from game cards because hand is drawn in the battlefield, not the selection screen\r\n\r\n            let newHand = state.gameCards.slice(0, 10)\r\n            let newEnemyHand = state.enemyGameCards.slice(0, 10)\r\n\r\n            let newGameCards = state.gameCards.filter(card => !(newHand.includes(card)))\r\n            let newEnemyGameCards = state.enemyGameCards.filter(card => !(newEnemyHand.includes(card)))\r\n            return {\r\n                ...state,\r\n                gameStart: true,\r\n                gameCards: newGameCards,\r\n                enemyGameCards: newEnemyGameCards,\r\n                hand: newHand,\r\n                enemyHand: newEnemyHand,\r\n                drawHands: false\r\n            }\r\n            break;\r\n\r\n        case 'PLAY_CARD':\r\n\r\n            let role = action.role\r\n\r\n            //Remove the card from hand\r\n            let updatedUserHand = state.hand.filter(card => card.id !== action.card.id)\r\n\r\n            //Update the row, then update the field with that updated row \r\n            let updatedUserRow = [...state.userField[role], action.card]\r\n            let updatedUserField = { ...state.userField, [role]: updatedUserRow }\r\n\r\n            //Find the new total, including the added card\r\n            let newUserTotal = newTotalScore(updatedUserField)\r\n            return { ...state, userField: updatedUserField, hand: updatedUserHand, userScore: newUserTotal }\r\n            break;\r\n\r\n        case 'PLAY_ENV':\r\n            //check to see if env already has that condition\r\n            let conditions = state.env.map(card => card.ability)\r\n            if (conditions.includes(action.card.ability)) {\r\n                return {\r\n                    ...state,\r\n                    userDiscard: [...state.userDiscard, action.card],\r\n                    hand: state.hand.filter(card => card.id !== action.card.id)\r\n                }\r\n            }\r\n            else {\r\n                return {\r\n                    ...state,\r\n                    env: [...state.env, action.card],\r\n                    hand: state.hand.filter(card => card.id !== action.card.id)\r\n                }\r\n            }\r\n\r\n        case 'ENEMY_PLAY':\r\n            let randomCard\r\n            let chosenCard\r\n            if (state.enemyHand.length > 1) {\r\n                randomCard = Math.floor(Math.random() * Math.floor(state.enemyHand.length))\r\n                chosenCard = state.enemyHand[randomCard]\r\n            }\r\n            else {\r\n                if (state.userScore >= state.enemyScore) {\r\n                    chosenCard = state.enemyHand[0]\r\n                }\r\n                else {\r\n                    return { ...state, enemyPass: true }\r\n                }\r\n            }\r\n\r\n            if (chosenCard.role === 'env') {\r\n                let conditions = state.env.map(card => card.ability)\r\n                if (conditions.includes(chosenCard.ability)) {\r\n                    return {\r\n                        ...state,\r\n                        enemyDiscard: [...state.enemyDiscard, chosenCard],\r\n                        enemyHand: state.enemyHand.filter(card => card.id !== chosenCard.id)\r\n                    }\r\n                }\r\n                else {\r\n                    return {\r\n                        ...state,\r\n                        env: [...state.env, chosenCard],\r\n                        enemyHand: state.enemyHand.filter(card => card.id !== chosenCard.id)\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                let updatedEnemyHand = state.enemyHand.filter(card => card.id !== chosenCard.id)\r\n\r\n                let updatedEnemyRow = [...state.enemyField[chosenCard.role], chosenCard]\r\n                let updatedEnemyField = { ...state.enemyField, [chosenCard.role]: updatedEnemyRow }\r\n\r\n                let newEnemyTotal = newTotalScore(updatedEnemyField)\r\n                return { ...state, enemyField: updatedEnemyField, enemyHand: updatedEnemyHand, enemyScore: newEnemyTotal }\r\n            }\r\n            break;\r\n\r\n        case 'ENEMY_PASS':\r\n            return { ...state, enemyPass: true, userTurn: true }\r\n            break;\r\n\r\n        case 'USER_PASS':\r\n            return { ...state, userPass: true }\r\n            break;\r\n\r\n        case 'END_TURN':\r\n            return { ...state, userTurn: !(state.userTurn) }\r\n\r\n        case 'ROUND_OVER':\r\n            if (state.userScore >= state.enemyScore) {\r\n                return { ...state, enemyReactors: (state.enemyReactors - 1) }\r\n            }\r\n            else if (state.userScore < state.enemyScore) {\r\n                return { ...state, userReactors: (state.userReactors - 1) }\r\n            }\r\n            break;\r\n\r\n        case 'RESET_BOARD':\r\n            //This is super ugly but it works. We're setting the discard to everything in userField\r\n            //And then we're hardcoding in new clean fields\r\n            let newUserDiscard = Object.values(state.userField).splice(0).flat();\r\n            let newEnemyDiscard = Object.values(state.enemyField).splice(0).flat();\r\n            let cleanUserField = {\r\n                userField: {\r\n                    space: [],\r\n                    ground: [],\r\n                    foot: [],\r\n                    other: []\r\n                }\r\n            }\r\n            let cleanEnemyField = {\r\n                enemyField: {\r\n                    space: [],\r\n                    ground: [],\r\n                    foot: [],\r\n                    other: []\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                userField: cleanUserField.userField,\r\n                enemyField: cleanEnemyField.enemyField,\r\n                userPass: false,\r\n                enemyPass: false,\r\n                userTurn: (state.userScore >= state.enemyScore ? true : false),\r\n                env: [],\r\n                userDiscard: [...state.userDiscard, ...newUserDiscard],\r\n                enemyDiscard: [...state.enemyDiscard, ...newEnemyDiscard],\r\n                userScore: 0,\r\n                enemyScore: 0\r\n            }\r\n            break;\r\n\r\n        case 'GAME_OVER':\r\n            return {\r\n                ...state,\r\n                userVictory: action.userVictory,\r\n                games: action.games,\r\n                userReactors: 2,\r\n                enemyReactors: 2,\r\n                env: [],\r\n                gameOn: false,\r\n                gameStart: false,\r\n                userPass: false,\r\n                enemyPass: false,\r\n                userDiscard: [],\r\n                enemyDiscard: []\r\n            }\r\n            break;\r\n\r\n\r\n        // ABILITIES \r\n\r\n        case 'DEVELOP':\r\n            console.log(action.userField)\r\n            console.log(action.oldStrength)\r\n            let developedUserFoot = state.userField.foot.map(card => {\r\n                if (card.id === action.card.id) {\r\n                    console.log(card.strength, action.oldStrength)\r\n                    card.strength = action.oldStrength\r\n                    console.log(card.strength, action.oldStrength)\r\n                };\r\n                return card\r\n            })\r\n            let developedUserGround = state.userField.ground.map(card => {\r\n                if (card.id === action.card.id) {\r\n                    card.strength = action.oldStrength\r\n                };\r\n                return card\r\n            })\r\n            let developedUserSpace = state.userField.space.map(card => {\r\n                if (card.id === action.card.id) {\r\n                    card.strength = action.oldStrength\r\n                };\r\n                return card\r\n            })\r\n            let developedEnemyFoot = state.enemyField.foot.map(card => {\r\n                if (card.id === action.card.id) {\r\n                    card.strength = action.oldStrength\r\n                };\r\n                return card\r\n            })\r\n            let developedEnemyGround = state.enemyField.ground.map(card => {\r\n                if (card.id === action.card.id) {\r\n                    card.strength = action.oldStrength\r\n                };\r\n                return card\r\n            })\r\n            let developedEnemySpace = state.enemyField.space.map(card => {\r\n                if (card.id === action.card.id) {\r\n                    card.strength = action.oldStrength\r\n                };\r\n                return card\r\n            })\r\n\r\n            let developedUserField = { ...state.userField, foot: developedUserFoot, ground: developedUserGround, space: developedUserSpace }\r\n            let developedEnemyField = { ...state.enemyField, foot: developedEnemyFoot, ground: developedEnemyGround, space: developedEnemySpace }\r\n\r\n            return { ...state, env: [], userField: developedUserField, enemyField: developedEnemyField }\r\n            break;\r\n\r\n        case 'COLD':\r\n            //change a card's strength to 1 if it's in the field, in the foot row \r\n            let coldRow = state.userField.foot.map(card => {\r\n                if (card.id === action.card.id) {\r\n                    card.strength = 1\r\n                };\r\n                return card\r\n            })\r\n            let coldEnemyRow = state.enemyField.foot.map(card => {\r\n                if (card.id === action.card.id) {\r\n                    card.strength = 1\r\n                };\r\n                return card\r\n            })\r\n            let coldUserField = { ...state.userField, foot: coldRow }\r\n            let coldEnemyField = { ...state.enemyField, foot: coldEnemyRow }\r\n\r\n            return { ...state, userField: coldUserField, enemyField: coldEnemyField, userScore: newTotalScore(coldUserField), enemyScore: newTotalScore(coldEnemyField) }\r\n            break;\r\n\r\n        case 'ROCKY':\r\n            let rockyRow = state.userField.ground.map(card => {\r\n                if (card.id === action.card.id) {\r\n                    card.strength = 1\r\n                };\r\n                return card\r\n            })\r\n            let rockyEnemyRow = state.enemyField.ground.map(card => {\r\n                if (card.id === action.card.id) {\r\n                    card.strength = 1\r\n                };\r\n                return card\r\n            })\r\n            let rockyUserField = { ...state.userField, ground: rockyRow }\r\n            let rockyEnemyField = { ...state.enemyField, ground: rockyEnemyRow }\r\n\r\n            return { ...state, userField: rockyUserField, enemyField: rockyEnemyField, userScore: newTotalScore(rockyUserField), enemyScore: newTotalScore(rockyEnemyField) }\r\n\r\n        case 'FLARE':\r\n            let flareRow = state.userField.space.map(card => {\r\n                if (card.id === action.card.id) {\r\n                    card.strength = 1\r\n                };\r\n                return card\r\n            })\r\n            let flareEnemyRow = state.enemyField.space.map(card => {\r\n                if (card.id === action.card.id) {\r\n                    card.strength = 1\r\n                };\r\n                return card\r\n            })\r\n            let flareUserField = { ...state.userField, space: flareRow }\r\n            let flareEnemyField = { ...state.enemyField, space: flareEnemyRow }\r\n\r\n            return { ...state, userField: flareUserField, enemyField: flareEnemyField, userScore: newTotalScore(flareUserField), enemyScore: newTotalScore(flareEnemyField) }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}