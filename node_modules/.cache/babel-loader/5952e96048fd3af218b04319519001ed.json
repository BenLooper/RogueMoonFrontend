{"ast":null,"code":"export const initialState = {\n  //login\n  usernameInput: '',\n  passwordInput: '',\n  user: {},\n  ownedCards: [],\n  games: [],\n  //gameboard\n  gameOn: false,\n  drawHands: false,\n  gameCards: [],\n  enemyGameCards: [],\n  hand: [],\n  enemyHand: [],\n  userDiscard: [],\n  enemyDiscard: [],\n  enemyField: {\n    space: [],\n    ground: [],\n    foot: [],\n    other: []\n  },\n  userField: {\n    space: [],\n    ground: [],\n    foot: [],\n    other: []\n  },\n  env: [],\n  //scores \n  userScore: 0,\n  enemyScore: 0,\n  //passing\n  userTurn: true,\n  userPass: false,\n  enemyPass: false,\n  //reactors \n  userReactors: 2,\n  enemyReactors: 2,\n  userVictory: null\n};\n\nconst rowScore = array => {\n  let score = 0;\n\n  for (let i = 0; i < array.length; i++) {\n    score += array[i].strength;\n  }\n\n  return score;\n};\n\nconst newTotalScore = field => {\n  //we iterate through the field values (rows), and get the total of each rowScore\n  let total = Object.values(field).reduce((total, row) => total + rowScore(row), 0);\n  return total;\n};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE_USERNAME_INPUT':\n      return { ...state,\n        usernameInput: action.value\n      };\n      break;\n\n    case 'CHANGE_PASSWORD_INPUT':\n      return { ...state,\n        passwordInput: action.value\n      };\n      break;\n\n    case 'SET_USER':\n      return { ...state,\n        user: action.user,\n        ownedCards: action.ownedCards,\n        games: action.games,\n        gameOn: false\n      };\n      break;\n\n    case 'SET_GAME_CARDS':\n      //TODO -> Gets sent a list of chosen cards to set as gameCards from the selection screen    \n      return { ...state,\n        gameCards: action.gameCards,\n        enemyGameCards: action.enemyGameCards,\n        drawHands: true\n      };\n      break;\n\n    case 'SET_HANDS':\n      //Separate from game cards because hand is drawn in the battlefield, not the selection screen\n      let newHand = state.gameCards.slice(0, 10);\n      let newEnemyHand = state.enemyGameCards.slice(0, 10);\n      let newGameCards = state.gameCards.filter(card => !newHand.includes(card));\n      let newEnemyGameCards = state.enemyGameCards.filter(card => !newEnemyHand.includes(card));\n      return { ...state,\n        gameCards: newGameCards,\n        enemyGameCards: newEnemyGameCards,\n        hand: newHand,\n        enemyHand: newEnemyHand,\n        gameOn: true,\n        drawHands: false\n      };\n      break;\n\n    case 'PLAY_CARD':\n      let role = action.role; //Remove the card from hand\n\n      let updatedUserHand = state.hand.filter(card => card.id !== action.card.id); //Update the row, then update the field with that updated row \n\n      let updatedUserRow = [...state.userField[role], action.card];\n      let updatedUserField = { ...state.userField,\n        [role]: updatedUserRow\n      }; //Find the new total, including the added card\n\n      let newUserTotal = newTotalScore(updatedUserField);\n      return { ...state,\n        userField: updatedUserField,\n        hand: updatedUserHand,\n        userScore: newUserTotal\n      };\n      break;\n\n    case 'PLAY_ENV':\n      //check to see if env already has that condition\n      let conditions = state.env.map(card => card.ability);\n\n      if (conditions.includes(action.card.ability)) {\n        return { ...state,\n          userDiscard: [...state.userDiscard, action.card],\n          hand: state.hand.filter(card => card.id !== action.card.id)\n        };\n      } else {\n        return { ...state,\n          env: [...state.env, action.card],\n          hand: state.hand.filter(card => card.id !== action.card.id)\n        };\n      }\n\n    case 'ENEMY_PLAY':\n      let randomCard;\n      let chosenCard;\n\n      if (state.enemyHand.length > 1) {\n        randomCard = Math.floor(Math.random() * Math.floor(state.enemyHand.length));\n        chosenCard = state.enemyHand[randomCard];\n      } else {\n        console.log(state.userScore, state.enemyScore);\n\n        if (state.userScore >= state.enemyScore) {\n          chosenCard = state.enemyHand[0];\n        } else {\n          console.log('where am I?');\n          return { ...state,\n            enemyPass: true\n          };\n        }\n      }\n\n      if (chosenCard.role === 'env') {\n        let conditions = state.env.map(card => card.ability);\n\n        if (conditions.includes(chosenCard.ability)) {\n          return { ...state,\n            enemyDiscard: [...state.enemyDiscard, chosenCard],\n            enemyHand: state.enemyHand.filter(card => card.id !== chosenCard.id)\n          };\n        } else {\n          return { ...state,\n            env: [...state.env, chosenCard],\n            enemyHand: state.enemyHand.filter(card => card.id !== chosenCard.id)\n          };\n        }\n      } else {\n        let updatedEnemyHand = state.enemyHand.filter(card => card.id !== chosenCard.id);\n        let updatedEnemyRow = [...state.enemyField[chosenCard.role], chosenCard];\n        let updatedEnemyField = { ...state.enemyField,\n          [chosenCard.role]: updatedEnemyRow\n        };\n        let newEnemyTotal = newTotalScore(updatedEnemyField);\n        return { ...state,\n          enemyField: updatedEnemyField,\n          enemyHand: updatedEnemyHand,\n          enemyScore: newEnemyTotal\n        };\n      }\n\n      break;\n\n    case 'ENEMY_PASS':\n      return { ...state,\n        enemyPass: true,\n        userTurn: true\n      };\n      break;\n\n    case 'USER_PASS':\n      return { ...state,\n        userPass: true\n      };\n      break;\n\n    case 'END_TURN':\n      return { ...state,\n        userTurn: !state.userTurn\n      };\n\n    case 'ROUND_OVER':\n      if (state.userScore >= state.enemyScore) {\n        return { ...state,\n          enemyReactors: state.enemyReactors - 1\n        };\n      } else if (state.userScore < state.enemyScore) {\n        return { ...state,\n          userReactors: state.userReactors - 1\n        };\n      }\n\n      break;\n\n    case 'RESET_BOARD':\n      //This is super ugly but it works. We're setting the discard to everything in userField\n      //And then we're hardcoding in new clean fields\n      let newUserDiscard = Object.values(state.userField).splice(0).flat();\n      let newEnemyDiscard = Object.values(state.enemyField).splice(0).flat();\n      let cleanUserField = {\n        userField: {\n          space: [],\n          ground: [],\n          foot: [],\n          other: []\n        }\n      };\n      let cleanEnemyField = {\n        enemyField: {\n          space: [],\n          ground: [],\n          foot: [],\n          other: []\n        }\n      };\n      return { ...state,\n        userField: cleanUserField.userField,\n        enemyField: cleanEnemyField.enemyField,\n        userPass: false,\n        enemyPass: false,\n        userTurn: state.userScore > state.enemyScore ? true : false,\n        env: [],\n        userDiscard: [...state.userDiscard, ...newUserDiscard],\n        enemyDiscard: [...state.enemyDiscard, ...newEnemyDiscard],\n        userScore: 0,\n        enemyScore: 0\n      };\n      break;\n\n    case 'GAME_OVER':\n      return { ...state,\n        userVictory: action.userVictory,\n        games: action.games,\n        userReactors: 2,\n        enemyReactors: 2,\n        env: [],\n        gameOn: false,\n        userDiscard: [],\n        enemyDiscard: []\n      };\n      break;\n    // ABILITIES \n\n    case 'DEVELOP':\n      let developedUserFoot = state.userField.foot.map(card => {\n        if (card.id === action.card.id && userField) {\n          card.strength = action.oldStrength;\n        }\n\n        ;\n        return card;\n      });\n      let developedUserGround = state.userField.ground.map(card => {\n        if (card.id === action.card.id && userField) {\n          card.strength = action.oldStrength;\n        }\n\n        ;\n        return card;\n      });\n      let developedUserSpace = state.userField.space.map(card => {\n        if (card.id === action.card.id && !userField) {\n          card.strength = action.oldStrength;\n        }\n\n        ;\n        return card;\n      });\n      let developedEnemyFoot = state.enemyField.foot.map(card => {\n        if (card.id === action.card.id && userField) {\n          card.strength = action.oldStrength;\n        }\n\n        ;\n        return card;\n      });\n      let developedEnemyGround = state.enemyField.ground.map(card => {\n        if (card.id === action.card.id && userField) {\n          card.strength = action.oldStrength;\n        }\n\n        ;\n        return card;\n      });\n      let developedEnemySpace = state.enemyField.space.map(card => {\n        if (card.id === action.card.id) {\n          card.strength = action.oldStrength;\n        }\n\n        ;\n        return card;\n      });\n      let developedUserField = { ...state.userField,\n        foot: developedUserFoot,\n        ground: developedUserGround,\n        space: developedUserSpace\n      };\n      let developedEnemyField = { ...state.enemyField,\n        foot: developedEnemyFoot,\n        ground: developedEnemyGround,\n        space: developedEnemySpace\n      };\n      return { ...state,\n        env: [],\n        userField: developedUserField,\n        enemyField: developedEnemyField\n      };\n      break;\n\n    case 'COLD':\n      //change a card's strength to 1 if it's in the field, in the foot row \n      let coldRow = state.userField.foot.map(card => {\n        if (card.id === action.card.id) {\n          card.strength = 1;\n        }\n\n        ;\n        return card;\n      });\n      let coldEnemyRow = state.enemyField.foot.map(card => {\n        if (card.id === action.card.id) {\n          card.strength = 1;\n        }\n\n        ;\n        return card;\n      });\n      let coldUserField = { ...state.userField,\n        foot: coldRow\n      };\n      let coldEnemyField = { ...state.enemyField,\n        foot: coldEnemyRow\n      };\n      return { ...state,\n        userField: coldUserField,\n        enemyField: coldEnemyField,\n        userScore: newTotalScore(coldUserField),\n        enemyScore: newTotalScore(coldEnemyField)\n      };\n      break;\n\n    case 'ROCKY':\n      let rockyRow = state.userField.ground.map(card => {\n        if (card.id === action.card.id) {\n          card.strength = 1;\n        }\n\n        ;\n        return card;\n      });\n      let rockyEnemyRow = state.enemyField.ground.map(card => {\n        if (card.id === action.card.id) {\n          card.strength = 1;\n        }\n\n        ;\n        return card;\n      });\n      let rockyUserField = { ...state.userField,\n        ground: rockyRow\n      };\n      let rockyEnemyField = { ...state.enemyField,\n        ground: rockyEnemyRow\n      };\n      return { ...state,\n        userField: rockyUserField,\n        enemyField: rockyEnemyField,\n        userScore: newTotalScore(rockyUserField),\n        enemyScore: newTotalScore(rockyEnemyField)\n      };\n\n    case 'FLARE':\n      let flareRow = state.userField.space.map(card => {\n        if (card.id === action.card.id) {\n          card.strength = 1;\n        }\n\n        ;\n        return card;\n      });\n      let flareEnemyRow = state.enemyField.space.map(card => {\n        if (card.id === action.card.id) {\n          card.strength = 1;\n        }\n\n        ;\n        return card;\n      });\n      let flareUserField = { ...state.userField,\n        space: flareRow\n      };\n      let flareEnemyField = { ...state.enemyField,\n        space: flareEnemyRow\n      };\n      return { ...state,\n        userField: flareUserField,\n        enemyField: flareEnemyField,\n        userScore: newTotalScore(flareUserField),\n        enemyScore: newTotalScore(flareEnemyField)\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/ben/flatiron/work/mod5/moon-gwent/frontend/src/store/reducers/index.js"],"names":["initialState","usernameInput","passwordInput","user","ownedCards","games","gameOn","drawHands","gameCards","enemyGameCards","hand","enemyHand","userDiscard","enemyDiscard","enemyField","space","ground","foot","other","userField","env","userScore","enemyScore","userTurn","userPass","enemyPass","userReactors","enemyReactors","userVictory","rowScore","array","score","i","length","strength","newTotalScore","field","total","Object","values","reduce","row","reducer","state","action","type","value","newHand","slice","newEnemyHand","newGameCards","filter","card","includes","newEnemyGameCards","role","updatedUserHand","id","updatedUserRow","updatedUserField","newUserTotal","conditions","map","ability","randomCard","chosenCard","Math","floor","random","console","log","updatedEnemyHand","updatedEnemyRow","updatedEnemyField","newEnemyTotal","newUserDiscard","splice","flat","newEnemyDiscard","cleanUserField","cleanEnemyField","developedUserFoot","oldStrength","developedUserGround","developedUserSpace","developedEnemyFoot","developedEnemyGround","developedEnemySpace","developedUserField","developedEnemyField","coldRow","coldEnemyRow","coldUserField","coldEnemyField","rockyRow","rockyEnemyRow","rockyUserField","rockyEnemyField","flareRow","flareEnemyRow","flareUserField","flareEnemyField"],"mappings":"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","sourcesContent":["export const initialState = {\n    //login\n    usernameInput: '',\n    passwordInput: '',\n    user: {},\n    ownedCards: [],\n    games: [],\n\n    //gameboard\n    gameOn: false,\n    drawHands: false,\n    gameCards: [],\n    enemyGameCards: [],\n    hand: [],\n    enemyHand: [],\n    userDiscard: [],\n    enemyDiscard: [],\n    enemyField: {\n        space: [],\n        ground: [],\n        foot: [],\n        other: []\n    },\n    userField: {\n        space: [],\n        ground: [],\n        foot: [],\n        other: []\n    },\n    env: [],\n\n    //scores \n    userScore: 0,\n    enemyScore: 0,\n\n    //passing\n    userTurn: true,\n    userPass: false,\n    enemyPass: false,\n\n    //reactors \n    userReactors: 2,\n    enemyReactors: 2,\n\n    userVictory: null\n}\n\nconst rowScore = (array) => {\n    let score = 0\n    for (let i = 0; i < array.length; i++) {\n        score += array[i].strength\n    }\n    return score\n}\n\nconst newTotalScore = (field) => {\n    //we iterate through the field values (rows), and get the total of each rowScore\n    let total = Object.values(field).reduce((total, row) => total + (rowScore(row)), 0)\n    return total\n}\n\n\nexport const reducer = (state, action) => {\n    switch (action.type) {\n\n        case 'CHANGE_USERNAME_INPUT':\n            return { ...state, usernameInput: action.value }\n            break;\n\n        case 'CHANGE_PASSWORD_INPUT':\n            return { ...state, passwordInput: action.value }\n            break;\n\n        case 'SET_USER':\n            return { ...state, user: action.user, ownedCards: action.ownedCards, games: action.games, gameOn: false }\n            break;\n\n        case 'SET_GAME_CARDS':\n            //TODO -> Gets sent a list of chosen cards to set as gameCards from the selection screen    \n            return { ...state, gameCards: action.gameCards, enemyGameCards: action.enemyGameCards, drawHands: true }\n            break;\n\n        case 'SET_HANDS':\n            //Separate from game cards because hand is drawn in the battlefield, not the selection screen\n\n            let newHand = state.gameCards.slice(0, 10)\n            let newEnemyHand = state.enemyGameCards.slice(0, 10)\n\n            let newGameCards = state.gameCards.filter(card => !(newHand.includes(card)))\n            let newEnemyGameCards = state.enemyGameCards.filter(card => !(newEnemyHand.includes(card)))\n            return {\n                ...state,\n                gameCards: newGameCards,\n                enemyGameCards: newEnemyGameCards,\n                hand: newHand,\n                enemyHand: newEnemyHand,\n                gameOn: true,\n                drawHands: false\n            }\n            break;\n\n        case 'PLAY_CARD':\n            let role = action.role\n\n            //Remove the card from hand\n            let updatedUserHand = state.hand.filter(card => card.id !== action.card.id)\n\n            //Update the row, then update the field with that updated row \n            let updatedUserRow = [...state.userField[role], action.card]\n            let updatedUserField = { ...state.userField, [role]: updatedUserRow }\n\n            //Find the new total, including the added card\n            let newUserTotal = newTotalScore(updatedUserField)\n            return { ...state, userField: updatedUserField, hand: updatedUserHand, userScore: newUserTotal }\n            break;\n\n        case 'PLAY_ENV':\n            //check to see if env already has that condition\n            let conditions = state.env.map(card => card.ability)\n            if (conditions.includes(action.card.ability)) {\n                return {\n                    ...state,\n                    userDiscard: [...state.userDiscard, action.card],\n                    hand: state.hand.filter(card => card.id !== action.card.id)\n                }\n            }\n            else {\n                return {\n                    ...state,\n                    env: [...state.env, action.card],\n                    hand: state.hand.filter(card => card.id !== action.card.id)\n                }\n            }\n\n        case 'ENEMY_PLAY':\n            let randomCard\n            let chosenCard\n            if (state.enemyHand.length > 1) {\n                randomCard = Math.floor(Math.random() * Math.floor(state.enemyHand.length))\n                chosenCard = state.enemyHand[randomCard]\n            }\n            else {\n                console.log(state.userScore, state.enemyScore)\n                if (state.userScore >= state.enemyScore) {\n                    chosenCard = state.enemyHand[0]\n                }\n                else {\n                    console.log('where am I?')\n                    return { ...state, enemyPass:true}\n                }\n            }\n\n            if (chosenCard.role === 'env') {\n                let conditions = state.env.map(card => card.ability)\n                if (conditions.includes(chosenCard.ability)) {\n                    return {\n                        ...state,\n                        enemyDiscard: [...state.enemyDiscard, chosenCard],\n                        enemyHand: state.enemyHand.filter(card => card.id !== chosenCard.id)\n                    }\n                }\n                else {\n                    return {\n                        ...state,\n                        env: [...state.env, chosenCard],\n                        enemyHand: state.enemyHand.filter(card => card.id !== chosenCard.id)\n                    }\n                }\n            }\n            else {\n                let updatedEnemyHand = state.enemyHand.filter(card => card.id !== chosenCard.id)\n\n                let updatedEnemyRow = [...state.enemyField[chosenCard.role], chosenCard]\n                let updatedEnemyField = { ...state.enemyField, [chosenCard.role]: updatedEnemyRow }\n\n                let newEnemyTotal = newTotalScore(updatedEnemyField)\n                return { ...state, enemyField: updatedEnemyField, enemyHand: updatedEnemyHand, enemyScore: newEnemyTotal}\n            }\n            break;\n\n        case 'ENEMY_PASS':\n            return { ...state, enemyPass: true, userTurn: true }\n            break;\n\n        case 'USER_PASS':\n            return { ...state, userPass: true }\n            break;\n\n        case 'END_TURN':\n            return { ...state, userTurn: !(state.userTurn) }\n\n        case 'ROUND_OVER':\n            if (state.userScore >= state.enemyScore) {\n                return { ...state, enemyReactors: (state.enemyReactors - 1) }\n            }\n            else if (state.userScore < state.enemyScore) {\n                return { ...state, userReactors: (state.userReactors - 1) }\n            }\n            break;\n\n        case 'RESET_BOARD':\n            //This is super ugly but it works. We're setting the discard to everything in userField\n            //And then we're hardcoding in new clean fields\n            let newUserDiscard = Object.values(state.userField).splice(0).flat();\n            let newEnemyDiscard = Object.values(state.enemyField).splice(0).flat();\n            let cleanUserField = {\n                userField: {\n                    space: [],\n                    ground: [],\n                    foot: [],\n                    other: []\n                }\n            }\n            let cleanEnemyField = {\n                enemyField: {\n                    space: [],\n                    ground: [],\n                    foot: [],\n                    other: []\n                }\n            }\n            return {\n                ...state,\n                userField: cleanUserField.userField,\n                enemyField: cleanEnemyField.enemyField,\n                userPass: false,\n                enemyPass: false,\n                userTurn: (state.userScore > state.enemyScore ? true : false),\n                env: [],\n                userDiscard: [...state.userDiscard, ...newUserDiscard],\n                enemyDiscard: [...state.enemyDiscard, ...newEnemyDiscard],\n                userScore: 0,\n                enemyScore: 0\n            }\n            break;\n\n        case 'GAME_OVER':\n            return {\n                ...state,\n                userVictory: action.userVictory,\n                games: action.games,\n                userReactors: 2,\n                enemyReactors: 2,\n                env: [],\n                gameOn: false,\n                userDiscard: [],\n                enemyDiscard: []\n            }\n            break;\n\n        // ABILITIES \n\n        case 'DEVELOP':\n            let developedUserFoot = state.userField.foot.map(card => {\n                if (card.id === action.card.id && (userField)) {\n                    card.strength = action.oldStrength\n                };\n                return card\n            })\n            let developedUserGround = state.userField.ground.map(card => {\n                if (card.id === action.card.id && (userField)) {\n                    card.strength = action.oldStrength\n                };\n                return card\n            })\n            let developedUserSpace = state.userField.space.map(card => {\n                if (card.id === action.card.id && !(userField)) {\n                    card.strength = action.oldStrength\n                };\n                return card\n            })\n            let developedEnemyFoot = state.enemyField.foot.map(card => {\n                if (card.id === action.card.id && (userField)) {\n                    card.strength = action.oldStrength\n                };\n                return card\n            })\n            let developedEnemyGround = state.enemyField.ground.map(card => {\n                if (card.id === action.card.id && (userField)) {\n                    card.strength = action.oldStrength\n                };\n                return card\n            })\n            let developedEnemySpace = state.enemyField.space.map(card => {\n                if (card.id === action.card.id) {\n                    card.strength = action.oldStrength\n                };\n                return card\n            })\n\n            let developedUserField = { ...state.userField, foot: developedUserFoot, ground: developedUserGround, space: developedUserSpace }\n            let developedEnemyField = { ...state.enemyField, foot: developedEnemyFoot, ground: developedEnemyGround, space: developedEnemySpace }\n\n            return { ...state, env: [], userField: developedUserField, enemyField: developedEnemyField }\n            break;\n\n        case 'COLD':\n            //change a card's strength to 1 if it's in the field, in the foot row \n            let coldRow = state.userField.foot.map(card => {\n                if (card.id === action.card.id) {\n                    card.strength = 1\n                };\n                return card\n            })\n            let coldEnemyRow = state.enemyField.foot.map(card => {\n                if (card.id === action.card.id) {\n                    card.strength = 1\n                };\n                return card\n            })\n            let coldUserField = { ...state.userField, foot: coldRow }\n            let coldEnemyField = { ...state.enemyField, foot: coldEnemyRow }\n\n            return { ...state, userField: coldUserField, enemyField: coldEnemyField, userScore: newTotalScore(coldUserField), enemyScore: newTotalScore(coldEnemyField) }\n            break;\n\n        case 'ROCKY':\n            let rockyRow = state.userField.ground.map(card => {\n                if (card.id === action.card.id) {\n                    card.strength = 1\n                };\n                return card\n            })\n            let rockyEnemyRow = state.enemyField.ground.map(card => {\n                if (card.id === action.card.id) {\n                    card.strength = 1\n                };\n                return card\n            })\n            let rockyUserField = { ...state.userField, ground: rockyRow }\n            let rockyEnemyField = { ...state.enemyField, ground: rockyEnemyRow }\n\n            return { ...state, userField: rockyUserField, enemyField: rockyEnemyField, userScore: newTotalScore(rockyUserField), enemyScore: newTotalScore(rockyEnemyField) }\n\n        case 'FLARE':\n            let flareRow = state.userField.space.map(card => {\n                if (card.id === action.card.id) {\n                    card.strength = 1\n                };\n                return card\n            })\n            let flareEnemyRow = state.enemyField.space.map(card => {\n                if (card.id === action.card.id) {\n                    card.strength = 1\n                };\n                return card\n            })\n            let flareUserField = { ...state.userField, space: flareRow }\n            let flareEnemyField = { ...state.enemyField, space: flareEnemyRow }\n\n            return { ...state, userField: flareUserField, enemyField: flareEnemyField, userScore: newTotalScore(flareUserField), enemyScore: newTotalScore(flareEnemyField) }\n\n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}