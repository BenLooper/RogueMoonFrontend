{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ben/flatiron/work/mod5/moon-gwent/frontend/src/containers/PlayerInfo.js\",\n    _s = $RefreshSig$();\n\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport UnitCard from '../components/UnitCard.js';\n\nfunction PlayerInfo() {\n  _s();\n\n  const dispatch = useDispatch();\n  const games = useSelector(state => state.games);\n  const gameOn = useSelector(state => state.gameOn);\n  const gameStart = useSelector(state => state.gameStart);\n  const userScore = useSelector(state => state.userScore);\n  const enemyScore = useSelector(state => state.enemyScore);\n  const userPass = useSelector(state => state.userPass);\n  const enemyPass = useSelector(state => state.enemyPass);\n  const userTurn = useSelector(state => state.userTurn);\n  const userReactors = useSelector(state => state.userReactors);\n  const enemyReactors = useSelector(state => state.enemyReactors);\n  const userVictory = useSelector(state => state.userVictory);\n  const hand = useSelector(state => state.hand);\n  const enemyHand = useSelector(state => state.enemyHand);\n  const userField = useSelector(state => state.userField);\n  const enemyField = useSelector(state => state.enemyField);\n  const env = useSelector(state => state.env);\n\n  const pass = () => {\n    dispatch({\n      type: 'USER_PASS'\n    });\n    dispatch({\n      type: 'END_TURN'\n    });\n  }; //Checks to see if both have passed \n  //End game actually triggered by ROUND_OVER updating reactors \n  //Runs enemy turn after user plays a card / passes \n\n\n  useEffect(() => {\n    //this prevents him playing before hands are set\n    if (gameStart && enemyHand.length === 0) {\n      setTimeout(() => dispatch({\n        type: 'ENEMY_PASS'\n      }), 2000);\n    } //if it's his turn and he's passed, he ends his turn \n    else if (userTurn === false && enemyPass && !userPass) {\n        setTimeout(() => dispatch({\n          type: 'END_TURN'\n        }), 1000);\n      } //if I've passed and it's my turn, it goes back to him\n      else if (userTurn === true && userPass === true && !enemyPass && !userTurn) {\n          setTimeout(() => dispatch({\n            type: 'END_TURN'\n          }), 1000);\n        } else if (userPass && userScore < enemyScore && !enemyPass) {\n          setTimeout(() => dispatch({\n            type: 'ENEMY_PASS'\n          }), 1000);\n        } else if (hand.length > enemyHand.length && userScore > enemyScore + 5 && !enemyPass && !userTurn) {\n          setTimeout(() => dispatch({\n            type: 'ENEMY_PASS'\n          }), 1000);\n        } else if (enemyScore + 10 < userScore && !enemyPass) {\n          setTimeout(() => dispatch({\n            type: 'ENEMY_PASS'\n          }), 1000);\n        } //if I've passed or played and it's his turn (and he hasn't passed), he plays a card\n        else if ((userTurn === false || userPass === true) && !enemyPass) {\n            setTimeout(() => dispatch({\n              type: 'ENEMY_PLAY'\n            }), 1000);\n\n            if (enemyHand.length >= 1) {\n              setTimeout(() => dispatch({\n                type: 'END_TURN'\n              }), 2000);\n            }\n          }\n  }, [userTurn, enemyPass]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"User Score: \", userScore]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Enemy Score: \", enemyScore]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"User cards in hand: \", hand.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Enemy cards in hand: \", enemyHand.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"User Reactors Left: \", userReactors]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Enemy Reactors Left: \", enemyReactors]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"card-tray\",\n            children: [env.map(card => /*#__PURE__*/_jsxDEV(UnitCard, {\n              card: card\n            }, card.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 69\n            }, this)), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Turn: \", userTurn ? 'User' : 'Enemy']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"User Passed: \", userPass ? 'Yes' : 'No']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Enemy Passed: \", enemyPass ? 'Yes' : 'No']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: pass,\n      children: \"Pass\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"GAME WINNER: \", userVictory && userVictory !== null ? 'User' : 'Enemy']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PlayerInfo, \"RS+WkunucBOfulry0s9H4i2Qdao=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = PlayerInfo;\nexport default PlayerInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerInfo\");","map":{"version":3,"sources":["/Users/ben/flatiron/work/mod5/moon-gwent/frontend/src/containers/PlayerInfo.js"],"names":["Container","Row","Col","useSelector","useDispatch","useEffect","UnitCard","PlayerInfo","dispatch","games","state","gameOn","gameStart","userScore","enemyScore","userPass","enemyPass","userTurn","userReactors","enemyReactors","userVictory","hand","enemyHand","userField","enemyField","env","pass","type","length","setTimeout","map","card","id"],"mappings":"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","sourcesContent":["import { Container, Row, Col } from 'react-bootstrap'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useEffect } from 'react'\nimport UnitCard from '../components/UnitCard.js'\n\nfunction PlayerInfo() {\n\n    const dispatch = useDispatch()\n\n    const games = useSelector((state) => state.games)\n    const gameOn = useSelector((state) => state.gameOn)\n    const gameStart = useSelector((state) => state.gameStart)\n\n    const userScore = useSelector((state) => state.userScore)\n    const enemyScore = useSelector((state) => state.enemyScore)\n\n    const userPass = useSelector((state) => state.userPass)\n    const enemyPass = useSelector((state) => state.enemyPass)\n    const userTurn = useSelector((state) => state.userTurn)\n\n    const userReactors = useSelector((state) => state.userReactors)\n    const enemyReactors = useSelector((state) => state.enemyReactors)\n\n    const userVictory = useSelector((state) => state.userVictory)\n\n    const hand = useSelector((state) => state.hand)\n    const enemyHand = useSelector((state) => state.enemyHand)\n\n    const userField = useSelector((state) => state.userField)\n    const enemyField = useSelector((state) => state.enemyField)\n    const env = useSelector((state) => state.env)\n\n    const pass = () => {\n        dispatch({ type: 'USER_PASS' })\n        dispatch({ type: 'END_TURN' })\n    }\n\n\n    //Checks to see if both have passed \n    //End game actually triggered by ROUND_OVER updating reactors \n\n    //Runs enemy turn after user plays a card / passes \n    useEffect(() => {\n        //this prevents him playing before hands are set\n        if (gameStart && enemyHand.length === 0) {\n            setTimeout(() => dispatch({ type: 'ENEMY_PASS' }), 2000)\n        }\n        //if it's his turn and he's passed, he ends his turn \n        else if (userTurn === false && enemyPass && !(userPass)) {\n            setTimeout(() => dispatch({ type: 'END_TURN' }), 1000)\n        }\n        //if I've passed and it's my turn, it goes back to him\n        else if (userTurn === true && userPass === true && !(enemyPass) && !(userTurn)) {\n            setTimeout(() => dispatch({ type: 'END_TURN' }), 1000)\n        }\n        else if (userPass && (userScore < enemyScore) && !(enemyPass)) {\n            setTimeout(() => dispatch({ type: 'ENEMY_PASS' }), 1000)\n        }\n        else if ((hand.length > enemyHand.length) && (userScore > (enemyScore + 5) && !(enemyPass) && !(userTurn))) {\n            setTimeout(() => dispatch({ type: 'ENEMY_PASS' }), 1000)\n        }\n        else if ((enemyScore + 10) < userScore && !(enemyPass)) {\n            setTimeout(() => dispatch({ type: 'ENEMY_PASS' }), 1000)\n        }\n        //if I've passed or played and it's his turn (and he hasn't passed), he plays a card\n        else if ((userTurn === false || userPass === true) && !(enemyPass)) {\n            setTimeout(() => dispatch({ type: 'ENEMY_PLAY' }), 1000)\n            if (enemyHand.length >= 1) { setTimeout(() => dispatch({ type: 'END_TURN' }), 2000) }\n        }\n    }, [userTurn, enemyPass])\n\n    return (\n        <div>\n            <h1>User Score: {userScore}</h1>\n            <h1>Enemy Score: {enemyScore}</h1>\n            <br></br>\n            <h1>User cards in hand: {hand.length}</h1>\n            <h1>Enemy cards in hand: {enemyHand.length}</h1>\n            <br></br>\n            <h1>User Reactors Left: {userReactors}</h1>\n            <h1>Enemy Reactors Left: {enemyReactors}</h1>\n            <br></br>\n            <Container>\n                <Row>\n                    <Col>\n                        <Row className=\"card-tray\">{env.map(card => <UnitCard card={card} key={card.id} />)} </Row>\n                    </Col>\n                </Row>\n            </Container>\n            <h1>Turn: {userTurn ? 'User' : 'Enemy'}</h1>\n            <h1>User Passed: {userPass ? 'Yes' : 'No'}</h1>\n            <h1>Enemy Passed: {enemyPass ? 'Yes' : 'No'}</h1>\n            <button onClick={pass}>Pass</button>\n            {/* <h1>Games Played: {games.length}</h1> */}\n            <h1>GAME WINNER: {userVictory && userVictory !== null ? 'User' : 'Enemy'}</h1>\n        </div>\n    )\n}\n\nexport default PlayerInfo;"]},"metadata":{},"sourceType":"module"}