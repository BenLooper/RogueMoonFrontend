{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\17132\\\\Documents\\\\RogueMoonFrontend\\\\src\\\\containers\\\\Battlefield.js\",\n    _s = $RefreshSig$();\n\nimport { Container, Row, Col, CardGroup, Card, Spinner, Button } from 'react-bootstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport UnitCard from '../components/UnitCard.js';\nimport EnemyCard from '../components/EnemyCard.js';\n\nfunction Battlefield() {\n  _s();\n\n  const dispatch = useDispatch();\n  const gameOn = useSelector(state => state.gameOn);\n  const drawHands = useSelector(state => state.drawHands);\n  const enemyField = useSelector(state => state.enemyField);\n  const userField = useSelector(state => state.userField);\n  const env = useSelector(state => state.env);\n  const [conditions, setConditions] = useState([]);\n  const ownedCards = useSelector(state => state.ownedCards);\n  const hand = useSelector(state => state.hand);\n  const enemyHand = useSelector(state => state.enemyHand);\n  const userPass = useSelector(state => state.userPass);\n  const enemyPass = useSelector(state => state.enemyPass);\n  const userTurn = useSelector(state => state.userTurn);\n\n  const shuffle = array => {\n    let currentIndex = array.length,\n        temporaryValue,\n        randomIndex; // While there remain elements to shuffle...\n\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1; // And swap it with the current element.\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  };\n\n  const rowScore = array => {\n    let score = 0;\n\n    for (let i = 0; i < array.length; i++) {\n      score += array[i].strength;\n    }\n\n    return score;\n  }; //On mount, set the game cards and setHands to true \n\n\n  useEffect(() => {\n    let shuffledEnemyGameCards = shuffle(ownedCards);\n    dispatch({\n      type: 'SET_ENEMY_GAME_CARDS',\n      enemyGameCards: shuffledEnemyGameCards\n    });\n    dispatch({\n      type: 'RESET_BOARD'\n    });\n  }, []);\n  useEffect(() => {\n    if (gameOn === true && drawHands === true) {\n      dispatch({\n        type: 'SET_HANDS'\n      });\n    }\n  }, [drawHands]);\n  useEffect(() => {\n    setConditions(env.map(card => card.ability));\n  }, [env]);\n  return (\n    /*#__PURE__*/\n    //These rows populate with played cards\n    //Furthest left is total strength, then active buff, then cards\n    _jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        className: \"card-tray\",\n        children: enemyHand.map(card => /*#__PURE__*/_jsxDEV(EnemyCard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 40\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          style: {\n            border: 'solid'\n          },\n          className: \"row-score-box\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: conditions.includes('flare') ? 'red' : 'green'\n            },\n            class: \"row-score\",\n            children: rowScore(enemyField.space)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: 10,\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"card-tray\",\n            children: enemyField.space.map(card => /*#__PURE__*/_jsxDEV(UnitCard, {\n              card: card,\n              env: env,\n              userField: false\n            }, card.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 78\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          style: {\n            border: 'solid'\n          },\n          className: \"row-score-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: conditions.includes('rocky') ? 'red' : 'green'\n            },\n            class: \"row-score\",\n            children: rowScore(enemyField.ground)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 21\n          }, this), \"                \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: 10,\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"card-tray\",\n            children: enemyField.ground.map(card => /*#__PURE__*/_jsxDEV(UnitCard, {\n              card: card,\n              env: env,\n              userField: false\n            }, card.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 79\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          style: {\n            border: 'solid'\n          },\n          className: \"row-score-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: conditions.includes('cold') ? 'red' : 'green'\n            },\n            class: \"row-score\",\n            children: rowScore(enemyField.foot)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 21\n          }, this), \"                \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: 10,\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"card-tray\",\n            children: enemyField.foot.map(card => /*#__PURE__*/_jsxDEV(UnitCard, {\n              card: card,\n              env: env,\n              userField: false\n            }, card.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 77\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          style: {\n            border: 'solid'\n          },\n          className: \"row-score-box\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: conditions.includes('cold') ? 'red' : 'green'\n            },\n            class: \"row-score\",\n            children: rowScore(userField.foot)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: 10,\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"card-tray\",\n            children: userField.foot.map(card => /*#__PURE__*/_jsxDEV(UnitCard, {\n              card: card,\n              env: env,\n              userField: true\n            }, card.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 76\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          style: {\n            border: 'solid'\n          },\n          className: \"row-score-box\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: conditions.includes('rocky') ? 'red' : 'green'\n            },\n            class: \"row-score\",\n            children: rowScore(userField.ground)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: 10,\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"card-tray\",\n            children: userField.ground.map(card => /*#__PURE__*/_jsxDEV(UnitCard, {\n              card: card,\n              env: env,\n              userField: true\n            }, card.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 78\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          style: {\n            border: 'solid'\n          },\n          className: \"row-score-box\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: conditions.includes('flare') ? 'red' : 'green'\n            },\n            class: \"row-score\",\n            children: rowScore(userField.space)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: 10,\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"card-tray\",\n            children: userField.space.map(card => /*#__PURE__*/_jsxDEV(UnitCard, {\n              card: card,\n              env: env,\n              userField: true\n            }, card.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 77\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"card-tray\",\n        children: hand.map(card => /*#__PURE__*/_jsxDEV(UnitCard, {\n          card: card,\n          hand: true\n        }, card.id + 1, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 35\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"turn-box\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: [userTurn && !userPass || enemyPass && !userPass ? /*#__PURE__*/_jsxDEV(Button, {\n            style: {\n              fontFamily: 'impact',\n              color: 'black'\n            },\n            variant: \"success\",\n            disabled: true,\n            children: \"Your turn!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 21\n          }, this) : null, !userTurn && !enemyPass || userPass && !enemyPass ? /*#__PURE__*/_jsxDEV(Button, {\n            style: {\n              fontFamily: 'impact',\n              color: 'black'\n            },\n            variant: \"danger\",\n            disabled: true,\n            children: [/*#__PURE__*/_jsxDEV(Spinner, {\n              as: \"span\",\n              animation: \"border\",\n              size: \"sm\",\n              role: \"status\",\n              \"aria-hidden\": \"true\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 21\n            }, this), \"AI is thinking...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 21\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_s(Battlefield, \"02gFAeiMtINaUKU1DG5q95rr3QU=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Battlefield;\nexport default Battlefield;\n\nvar _c;\n\n$RefreshReg$(_c, \"Battlefield\");","map":{"version":3,"sources":["C:/Users/17132/Documents/RogueMoonFrontend/src/containers/Battlefield.js"],"names":["Container","Row","Col","CardGroup","Card","Spinner","Button","useSelector","useDispatch","useEffect","useState","UnitCard","EnemyCard","Battlefield","dispatch","gameOn","state","drawHands","enemyField","userField","env","conditions","setConditions","ownedCards","hand","enemyHand","userPass","enemyPass","userTurn","shuffle","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","rowScore","score","i","strength","shuffledEnemyGameCards","type","enemyGameCards","map","card","ability","border","color","includes","space","id","ground","foot","fontFamily"],"mappings":"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","sourcesContent":["import { Container, Row, Col, CardGroup, Card, Spinner, Button } from 'react-bootstrap'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { useEffect, useState } from 'react'\r\nimport UnitCard from '../components/UnitCard.js'\r\nimport EnemyCard from '../components/EnemyCard.js'\r\nfunction Battlefield() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const gameOn = useSelector((state) => state.gameOn)\r\n    const drawHands = useSelector((state) => state.drawHands)\r\n\r\n    const enemyField = useSelector((state) => state.enemyField)\r\n    const userField = useSelector((state) => state.userField)\r\n    const env = useSelector((state) => state.env)\r\n    const [conditions, setConditions] = useState([])\r\n\r\n    const ownedCards = useSelector((state) => state.ownedCards)\r\n\r\n    const hand = useSelector((state) => state.hand)\r\n    const enemyHand = useSelector((state) => state.enemyHand)\r\n\r\n    const userPass = useSelector((state) => state.userPass)\r\n    const enemyPass = useSelector((state) => state.enemyPass)\r\n    const userTurn = useSelector((state) => state.userTurn)\r\n\r\n    const shuffle = (array) => {\r\n        let currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n        // While there remain elements to shuffle...\r\n        while (0 !== currentIndex) {\r\n\r\n            // Pick a remaining element...\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex -= 1;\r\n\r\n            // And swap it with the current element.\r\n            temporaryValue = array[currentIndex];\r\n            array[currentIndex] = array[randomIndex];\r\n            array[randomIndex] = temporaryValue;\r\n        }\r\n\r\n        return array;\r\n    }\r\n\r\n    const rowScore = (array) => {\r\n        let score = 0\r\n        for (let i = 0; i < array.length; i++) {\r\n            score += array[i].strength\r\n        }\r\n        return score\r\n    }\r\n\r\n    //On mount, set the game cards and setHands to true \r\n    useEffect(() => {\r\n        let shuffledEnemyGameCards = shuffle(ownedCards)\r\n        dispatch({ type: 'SET_ENEMY_GAME_CARDS', enemyGameCards: shuffledEnemyGameCards })\r\n        dispatch({ type: 'RESET_BOARD' })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (gameOn === true && drawHands === true) {\r\n            dispatch({ type: 'SET_HANDS' })\r\n        }\r\n    }, [drawHands])\r\n\r\n    useEffect(() => {\r\n        setConditions(env.map(card => card.ability))\r\n    },[env])\r\n\r\n    return (\r\n        //These rows populate with played cards\r\n        //Furthest left is total strength, then active buff, then cards\r\n        <Container >\r\n            <Row className=\"card-tray\">\r\n                {enemyHand.map(card => <EnemyCard />)}\r\n            </Row>\r\n            <br></br>\r\n            <Row>\r\n                <Col style={{ border: 'solid' }} className=\"row-score-box\">\r\n                    <span style={{ color:conditions.includes('flare')?'red':'green' }} class=\"row-score\">{rowScore(enemyField.space)}</span>\r\n                </Col>\r\n                <Col xs={10} >\r\n                    <Row className=\"card-tray\">{enemyField.space.map(card => <UnitCard card={card} env={env} userField={false} key={card.id} />)}</Row>\r\n                </Col>\r\n\r\n            </Row>\r\n            <Row>\r\n                <Col style={{ border: 'solid' }} className=\"row-score-box\">\r\n                    <span style={{ color:conditions.includes('rocky')?'red':'green' }} class=\"row-score\">{rowScore(enemyField.ground)}</span>                </Col>\r\n                <Col xs={10}>\r\n                    <Row className=\"card-tray\">{enemyField.ground.map(card => <UnitCard card={card} env={env} userField={false} key={card.id} />)}</Row>\r\n                </Col>\r\n\r\n            </Row>\r\n            <Row>\r\n                <Col style={{ border: 'solid' }} className=\"row-score-box\">\r\n                    <span style={{ color:conditions.includes('cold')?'red':'green' }} class=\"row-score\">{rowScore(enemyField.foot)}</span>                </Col>\r\n                <Col xs={10}>\r\n                    <Row className=\"card-tray\">{enemyField.foot.map(card => <UnitCard card={card} env={env} userField={false} key={card.id} />)}</Row>\r\n                </Col>\r\n\r\n            </Row>\r\n            <br></br>\r\n            <Row>\r\n                <Col style={{ border: 'solid' }} className=\"row-score-box\">\r\n                    <span style={{ color:conditions.includes('cold')?'red':'green' }} class=\"row-score\">{rowScore(userField.foot)}</span>\r\n                </Col>\r\n                <Col xs={10}>\r\n                    <Row className=\"card-tray\">{userField.foot.map(card => <UnitCard card={card} env={env} userField={true} key={card.id} />)}</Row>\r\n                </Col>\r\n\r\n            </Row>\r\n            <Row>\r\n                <Col style={{ border: 'solid' }} className=\"row-score-box\">\r\n                    <span style={{ color:conditions.includes('rocky')?'red':'green' }} class=\"row-score\">{rowScore(userField.ground)}</span>\r\n                </Col>\r\n                <Col xs={10}>\r\n                    <Row className=\"card-tray\">{userField.ground.map(card => <UnitCard card={card} env={env} userField={true} key={card.id} />)}</Row>\r\n                </Col>\r\n\r\n            </Row>\r\n            <Row>\r\n                <Col style={{ border: 'solid' }} className=\"row-score-box\">\r\n                    <span style={{ color:conditions.includes('flare')?'red':'green' }} class=\"row-score\">{rowScore(userField.space)}</span>\r\n                </Col>\r\n                <Col xs={10}>\r\n                    <Row className=\"card-tray\">{userField.space.map(card => <UnitCard card={card} env={env} userField={true} key={card.id} />)}</Row>\r\n                </Col>\r\n\r\n            </Row>\r\n            <br></br>\r\n            {/* This row populates with cards drawn from a users deck.  */}\r\n            <Row className=\"card-tray\">\r\n                {hand.map(card => <UnitCard card={card} hand={true} key={card.id + 1} />)}\r\n            </Row>\r\n            <Row className=\"turn-box\">\r\n                <Col>\r\n                    {((userTurn && (!(userPass))) || (enemyPass && !(userPass)))?\r\n                    <Button style={{fontFamily:'impact', color:'black'}} variant=\"success\" disabled>\r\n                        Your turn!\r\n                    </Button>\r\n                    :null}\r\n                    {((!userTurn && (!(enemyPass))) || (userPass && !(enemyPass)))?\r\n                    <Button style={{fontFamily:'impact', color:'black'}} variant=\"danger\" disabled>\r\n                    <Spinner\r\n                      as=\"span\"\r\n                      animation=\"border\"\r\n                      size=\"sm\"\r\n                      role=\"status\"\r\n                      aria-hidden=\"true\"\r\n                    />\r\n                       AI is thinking...\r\n                  </Button>\r\n                    :null}\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Battlefield;"]},"metadata":{},"sourceType":"module"}