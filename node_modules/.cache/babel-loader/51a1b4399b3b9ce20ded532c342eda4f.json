{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ben/flatiron/work/mod5/moon-gwent/frontend/src/components/UnitCard.js\",\n    _s = $RefreshSig$();\n\nimport { Card } from 'react-bootstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect, useState } from 'react';\n\nconst UnitCard = ({\n  card,\n  hand,\n  field\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const env = useSelector(state => state.env);\n  const userTurn = useSelector(state => state.userTurn);\n  const [oldStrength] = useState(card.strength);\n\n  const playCard = () => {\n    let role = card.role;\n\n    if (role == 'env') {\n      //if it's an env card, put it in the shared env row\n      dispatch({\n        type: \"PLAY_ENV\",\n        card: card\n      });\n      dispatch({\n        type: \"END_TURN\"\n      });\n    } else {\n      //puts the card in the correct array inside field \n      dispatch({\n        type: \"PLAY_CARD\",\n        role: role,\n        card: card\n      });\n      dispatch({\n        type: 'END_TURN'\n      });\n    }\n  };\n\n  useEffect(() => {\n    //Cards look at env. When it changes, they run the corresponding action \n    //if they're in the field and not an env card, their strength is reduced accordingly\n    if (userField === true && !(card.role === 'env')) {\n      let conditions = env.map(card => card.ability);\n\n      if (conditions.includes('develop')) {\n        dispatch({\n          type: 'DEVELOP',\n          card: card,\n          oldStrength: oldStrength\n        });\n      } else if (card.role === 'foot' && conditions.includes('cold')) {\n        dispatch({\n          type: \"COLD\",\n          card: card\n        });\n      } else if (card.role === 'ground' && conditions.includes('rocky')) {\n        dispatch({\n          type: 'ROCKY',\n          card: card\n        });\n      } else if (card.role === 'space' && conditions.includes('flare')) {\n        dispatch({\n          type: 'FLARE',\n          card: card\n        });\n      }\n    }\n  }, [env]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"unit-card\",\n    onClick: hand && userTurn ? () => playCard() : null,\n    children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n      variant: \"top\",\n      src: card.image\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card.ImgOverlay, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Text, {\n        className: \"strength\",\n        children: hand ? oldStrength : card.strength\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n        className: \"role\",\n        children: card.role\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n        className: \"ability\",\n        children: card.ability\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UnitCard, \"tFLAIZ92sRtDL7UEwVo8sEbVIdM=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = UnitCard;\nexport default UnitCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"UnitCard\");","map":{"version":3,"sources":["/Users/ben/flatiron/work/mod5/moon-gwent/frontend/src/components/UnitCard.js"],"names":["Card","useSelector","useDispatch","useEffect","useState","UnitCard","card","hand","field","dispatch","env","state","userTurn","oldStrength","strength","playCard","role","type","userField","conditions","map","ability","includes","image"],"mappings":"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","sourcesContent":["import { Card } from 'react-bootstrap'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useEffect, useState } from 'react'\n\nconst UnitCard = ({ card, hand, field }) => {\n\n    const dispatch = useDispatch()\n    const env = useSelector((state) => state.env)\n    const userTurn = useSelector((state) => state.userTurn)\n    const [oldStrength] = useState(card.strength)\n\n    const playCard = () => {\n        let role = card.role\n        if (role == 'env') {\n            //if it's an env card, put it in the shared env row\n            dispatch({ type: \"PLAY_ENV\", card: card })\n            dispatch({ type: \"END_TURN\" })\n        }\n        else {\n            //puts the card in the correct array inside field \n            dispatch({ type: \"PLAY_CARD\", role: role, card: card })\n            dispatch({ type: 'END_TURN' })\n        }\n    }\n\n\n    useEffect(() => {\n        //Cards look at env. When it changes, they run the corresponding action \n        //if they're in the field and not an env card, their strength is reduced accordingly\n        if ((userField === true) && !(card.role === 'env')) {\n            let conditions = env.map(card => card.ability)\n            if (conditions.includes('develop')) {\n                dispatch({ type: 'DEVELOP', card: card, oldStrength: oldStrength })\n            }\n            else if ((card.role === 'foot') && (conditions.includes('cold'))) {\n                dispatch({ type: \"COLD\", card: card })\n            }\n            else if ((card.role === 'ground') && (conditions.includes('rocky'))) {\n                dispatch({ type: 'ROCKY', card: card })\n            }\n            else if ((card.role === 'space') && (conditions.includes('flare'))) {\n                dispatch({ type: 'FLARE', card: card })\n            }\n        }\n    }, [env])\n\n\n    return (\n        <Card className=\"unit-card\" onClick={hand && userTurn ? () => playCard() : null}>\n            <Card.Img variant='top' src={card.image} />\n            <Card.ImgOverlay>\n                <Card.Text className=\"strength\">{hand?oldStrength:card.strength}</Card.Text>\n                <Card.Text className=\"role\">{card.role}</Card.Text>\n                <Card.Text className=\"ability\">{card.ability}</Card.Text>\n            </Card.ImgOverlay>\n            {/* <Card.Body className=\"text-center\">\n                <Card.Title>{card.name}</Card.Title>\n                <Card.Subtitle>{card.ability}</Card.Subtitle>\n                <Card.Text>{card.flavor_text}</Card.Text>\n            </Card.Body> */}\n        </Card>\n    )\n}\n\nexport default UnitCard;"]},"metadata":{},"sourceType":"module"}