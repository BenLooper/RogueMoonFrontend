{"ast":null,"code":"export const initialState = {\n  //login\n  usernameInput: '',\n  passwordInput: '',\n  user: {},\n  ownedCards: [],\n  games: [],\n  //gameboard\n  gameOn: false,\n  gameCards: [],\n  enemyGameCards: [],\n  hand: [],\n  enemyHand: [],\n  userDiscard: [],\n  enemyDiscard: [],\n  enemyField: {\n    space: [],\n    ground: [],\n    foot: []\n  },\n  userField: {\n    space: [],\n    ground: [],\n    foot: []\n  },\n  //scores \n  userScore: 0,\n  enemyScore: 0,\n  //passing\n  userTurn: true,\n  userPass: false,\n  enemyPass: false,\n  //reactors \n  userReactors: 2,\n  enemyReactors: 2,\n  userVictory: null\n};\n\nconst rowScore = array => {\n  let score = 0;\n\n  for (let i = 0; i < array.length; i++) {\n    score += array[i].strength;\n  }\n\n  return score;\n};\n\nconst newTotalScore = field => {\n  //we iterate through the field values (rows), and get the total of each rowScore\n  let total = Object.values(field).reduce((total, row) => total + rowScore(row), 0);\n  return total;\n};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE_USERNAME_INPUT':\n      return { ...state,\n        usernameInput: action.value\n      };\n      break;\n\n    case 'CHANGE_PASSWORD_INPUT':\n      return { ...state,\n        passwordInput: action.value\n      };\n      break;\n\n    case 'SET_USER':\n      return { ...state,\n        user: action.user,\n        ownedCards: action.ownedCards,\n        games: action.games\n      };\n      break;\n\n    case 'SET_GAME_CARDS':\n      //TODO -> Gets sent a list of chosen cards to set as gameCards from the selection screen\n      return { ...state,\n        gameCards: state.ownedCards,\n        enemyGameCards: state.ownedCards,\n        gameOn: true\n      };\n      break;\n\n    case 'SET_HAND':\n      //Separate from game cards because hand is drawn in the battlefield, not the selection screen\n      //TODO -> Hand is randomly drawn from gameCards\n      let hand = state.gameCards.slice(5, 10);\n      return { ...state,\n        hand: hand,\n        enemyHand: hand\n      };\n      break;\n\n    case 'PLAY_CARD':\n      //Possible change --> send over something to indicate whether it's the enemy or user \n      let role = action.role; //Remove the card from hand\n\n      let updatedUserHand = state.hand.filter(card => card.id !== action.card.id); //Update the row, then update the field with that row \n\n      let updatedUserRow = [...state.userField[role], action.card];\n      let updatedUserField = { ...state.userField,\n        [role]: updatedUserRow\n      }; //Find the new total, including the added card\n\n      let newUserTotal = newTotalScore(updatedUserField);\n      return { ...state,\n        userField: updatedUserField,\n        hand: updatedUserHand,\n        userScore: newUserTotal\n      };\n      break;\n\n    case 'ENEMY_PLAY':\n      //grab card and remove it from hand\n      let chosenCard = state.enemyHand.splice(0, 1)[0];\n      let updatedEnemyRow = [...state.enemyField[chosenCard.role], chosenCard];\n      let updatedEnemyField = { ...state.enemyField,\n        [chosenCard.role]: updatedEnemyRow\n      };\n      let newEnemyTotal = newTotalScore(updatedEnemyField);\n      return { ...state,\n        enemyField: updatedEnemyField,\n        hand: state.enemyHand,\n        enemyScore: newEnemyTotal\n      };\n      break;\n\n    case 'ENEMY_PASS':\n      return { ...state,\n        enemyPass: true,\n        userTurn: true\n      };\n      break;\n\n    case 'USER_PASS':\n      return { ...state,\n        userPass: true,\n        userTurn: false\n      };\n      break;\n\n    case 'ROUND_OVER':\n      if (state.userScore >= state.enemyScore) {\n        return { ...state,\n          enemyReactors: state.enemyReactors - 1\n        };\n      } else if (state.userScore < state.enemyScore) {\n        return { ...state,\n          userReactors: state.userReactors - 1\n        };\n      }\n\n      break;\n\n    case 'RESET_BOARD':\n      //This is super ugly but it works. We're setting the discard to everything in userField\n      //And then we're hardcoding in a clean new userField\n      let newUserDiscard = Object.values(state.userField).splice(0).flat();\n      let newEnemyDiscard = Object.values(state.enemyField).splice(0).flat();\n      let cleanUserField = {\n        userField: {\n          space: [],\n          ground: [],\n          foot: []\n        }\n      };\n      let cleanEnemyField = {\n        enemyField: {\n          space: [],\n          ground: [],\n          foot: []\n        }\n      };\n      return { ...state,\n        userField: cleanUserField.userField,\n        enemyField: cleanEnemyField.enemyField,\n        userPass: false,\n        enemyPass: false,\n        userDiscard: newUserDiscard,\n        enemyDiscard: newEnemyDiscard,\n        userScore: 0,\n        enemyScore: 0\n      };\n      break;\n\n    case 'GAME_OVER':\n      return { ...state,\n        userVictory: action.userVictory,\n        games: action.games,\n        userReactors: 2,\n        enemyReactors: 2,\n        gameOn: false,\n        userDiscard: []\n      };\n      break;\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/ben/flatiron/work/mod5/moon-gwent/frontend/src/store/reducers/index.js"],"names":["initialState","usernameInput","passwordInput","user","ownedCards","games","gameOn","gameCards","enemyGameCards","hand","enemyHand","userDiscard","enemyDiscard","enemyField","space","ground","foot","userField","userScore","enemyScore","userTurn","userPass","enemyPass","userReactors","enemyReactors","userVictory","rowScore","array","score","i","length","strength","newTotalScore","field","total","Object","values","reduce","row","reducer","state","action","type","value","slice","role","updatedUserHand","filter","card","id","updatedUserRow","updatedUserField","newUserTotal","chosenCard","splice","updatedEnemyRow","updatedEnemyField","newEnemyTotal","newUserDiscard","flat","newEnemyDiscard","cleanUserField","cleanEnemyField"],"mappings":"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","sourcesContent":["export const initialState = {\n    //login\n    usernameInput: '',\n    passwordInput: '',\n    user: {},\n    ownedCards: [],\n    games: [],\n\n    //gameboard\n    gameOn: false,\n    gameCards: [],\n    enemyGameCards: [],\n    hand: [],\n    enemyHand: [],\n    userDiscard: [],\n    enemyDiscard: [],\n    enemyField: {\n        space: [],\n        ground: [],\n        foot: []\n    },\n    userField: {\n        space: [],\n        ground: [],\n        foot: []\n    },\n\n    //scores \n    userScore:0,\n    enemyScore:0,\n\n    //passing\n    userTurn: true,\n    userPass: false,\n    enemyPass: false,\n\n    //reactors \n    userReactors: 2,\n    enemyReactors: 2,\n\n    userVictory: null \n}\n\nconst rowScore = (array) => {\n    let score = 0\n    for (let i = 0; i < array.length; i++) {\n        score += array[i].strength\n    }\n    return score\n}\n\nconst newTotalScore = (field) => {\n    //we iterate through the field values (rows), and get the total of each rowScore\n    let total = Object.values(field).reduce((total, row) => total + (rowScore(row)), 0)\n    return total\n}\n\nexport const reducer = (state, action) => {\n    switch (action.type) {\n\n        case 'CHANGE_USERNAME_INPUT':\n            return { ...state, usernameInput: action.value }\n            break;\n\n        case 'CHANGE_PASSWORD_INPUT':\n            return { ...state, passwordInput: action.value }\n            break;\n\n        case 'SET_USER':\n            return { ...state, user: action.user, ownedCards: action.ownedCards, games: action.games }\n            break;\n\n        case 'SET_GAME_CARDS':\n            //TODO -> Gets sent a list of chosen cards to set as gameCards from the selection screen\n            return { ...state, gameCards: state.ownedCards, enemyGameCards: state.ownedCards, gameOn: true }\n            break;\n\n        case 'SET_HAND':\n            //Separate from game cards because hand is drawn in the battlefield, not the selection screen\n            //TODO -> Hand is randomly drawn from gameCards\n            let hand = state.gameCards.slice(5, 10);\n            return { ...state, hand: hand , enemyHand: hand}\n            break;\n\n        case 'PLAY_CARD':\n            //Possible change --> send over something to indicate whether it's the enemy or user \n            let role = action.role\n\n            //Remove the card from hand\n            let updatedUserHand = state.hand.filter(card => card.id !== action.card.id)\n\n            //Update the row, then update the field with that row \n            let updatedUserRow = [...state.userField[role], action.card]\n            let updatedUserField = { ...state.userField, [role]: updatedUserRow }\n\n            //Find the new total, including the added card\n            let newUserTotal = newTotalScore(updatedUserField)\n            return { ...state, userField: updatedUserField, hand: updatedUserHand, userScore: newUserTotal }\n            break;\n        \n        case 'ENEMY_PLAY':\n            //grab card and remove it from hand\n            let chosenCard = state.enemyHand.splice(0,1)[0]\n\n            let updatedEnemyRow = [...state.enemyField[chosenCard.role], chosenCard]\n            let updatedEnemyField = { ...state.enemyField, [chosenCard.role]: updatedEnemyRow }\n\n            let newEnemyTotal = newTotalScore(updatedEnemyField)\n            return { ...state, enemyField: updatedEnemyField, hand: state.enemyHand, enemyScore: newEnemyTotal }\n            break;\n\n        case 'ENEMY_PASS':\n            return {...state, enemyPass:true, userTurn: true}\n            break;\n\n        case 'USER_PASS':\n            return {...state, userPass:true, userTurn:false}\n            break;\n        \n        case 'ROUND_OVER':\n            if (state.userScore >= state.enemyScore){\n                return {...state, enemyReactors: (state.enemyReactors - 1)}\n            }\n            else if (state.userScore < state.enemyScore){\n                return {...state, userReactors: (state.userReactors - 1)}\n            }\n            break;\n        \n        case 'RESET_BOARD':\n            //This is super ugly but it works. We're setting the discard to everything in userField\n            //And then we're hardcoding in a clean new userField\n            let newUserDiscard = Object.values(state.userField).splice(0).flat();\n            let newEnemyDiscard = Object.values(state.enemyField).splice(0).flat();\n\n            let cleanUserField = {userField: {\n                space: [],\n                ground: [],\n                foot: []\n            }}\n            let cleanEnemyField = {enemyField: {\n                space: [],\n                ground: [],\n                foot: []\n            }}\n            return {...state, \n                userField:cleanUserField.userField, \n                enemyField:cleanEnemyField.enemyField,\n                userPass:false, \n                enemyPass:false,\n                userDiscard:newUserDiscard,\n                enemyDiscard:newEnemyDiscard,\n                userScore:0,\n                enemyScore:0}\n            break;\n\n        case 'GAME_OVER':\n            return {...state, \n                userVictory:action.userVictory, \n                games: action.games, \n                userReactors: 2,\n                enemyReactors: 2,\n                gameOn:false,\n                userDiscard:[]}\n            break;\n\n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}